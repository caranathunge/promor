[{"path":"https://caranathunge.github.io/promor/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Lesser General Public License","title":"GNU Lesser General Public License","text":"Version 2.1, February 1999Copyright © 1991, 1999 Free Software Foundation, Inc.51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed. first released version Lesser GPL. also counts successor GNU Library Public License, version 2, hence version number 2.1.","code":""},{"path":"https://caranathunge.github.io/promor/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Lesser General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public Licenses intended guarantee freedom share change free software–make sure software free users. license, Lesser General Public License, applies specially designated software packages–typically libraries–Free Software Foundation authors decide use . can use , suggest first think carefully whether license ordinary General Public License better strategy use particular case, based explanations . speak free software, referring freedom use, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish); receive source code can get want ; can change software use pieces new free programs; informed can things. protect rights, need make restrictions forbid distributors deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies library modify . example, distribute copies library, whether gratis fee, must give recipients rights gave . must make sure , , receive can get source code. link code library, must provide complete object files recipients, can relink library making changes library recompiling . must show terms know rights. protect rights two-step method: (1) copyright library, (2) offer license, gives legal permission copy, distribute /modify library. protect distributor, want make clear warranty free library. Also, library modified someone else passed , recipients know original version, original author’s reputation affected problems might introduced others. Finally, software patents pose constant threat existence free program. wish make sure company effectively restrict users free program obtaining restrictive license patent holder. Therefore, insist patent license obtained version library must consistent full freedom use specified license. GNU software, including libraries, covered ordinary GNU General Public License. license, GNU Lesser General Public License, applies certain designated libraries, quite different ordinary General Public License. use license certain libraries order permit linking libraries non-free programs. program linked library, whether statically using shared library, combination two legally speaking combined work, derivative original library. ordinary General Public License therefore permits linking entire combination fits criteria freedom. Lesser General Public License permits lax criteria linking code library. call license “Lesser” General Public License Less protect user’s freedom ordinary General Public License. also provides free software developers Less advantage competing non-free programs. disadvantages reason use ordinary General Public License many libraries. However, Lesser license provides advantages certain special circumstances. example, rare occasions, may special need encourage widest possible use certain library, becomes de-facto standard. achieve , non-free programs must allowed use library. frequent case free library job widely used non-free libraries. case, little gain limiting free library free software , use Lesser General Public License. cases, permission use particular library non-free programs enables greater number people use large body free software. example, permission use GNU C Library non-free programs enables many people use whole GNU operating system, well variant, GNU/Linux operating system. Although Lesser General Public License Less protective users’ freedom, ensure user program linked Library freedom wherewithal run program using modified version Library. precise terms conditions copying, distribution modification follow. Pay close attention difference “work based library” “work uses library”. former contains code derived library, whereas latter must combined library order run.","code":""},{"path":"https://caranathunge.github.io/promor/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU Lesser General Public License","text":"0. License Agreement applies software library program contains notice placed copyright holder authorized party saying may distributed terms Lesser General Public License (also called “License”). licensee addressed “”. “library” means collection software functions /data prepared conveniently linked application programs (use functions data) form executables. “Library”, , refers software library work distributed terms. “work based Library” means either Library derivative work copyright law: say, work containing Library portion , either verbatim modifications /translated straightforwardly another language. (Hereinafter, translation included without limitation term “modification”.) “Source code” work means preferred form work making modifications . library, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation library. Activities copying, distribution modification covered License; outside scope. act running program using Library restricted, output program covered contents constitute work based Library (independent use Library tool writing ). Whether true depends Library program uses Library . 1. may copy distribute verbatim copies Library’s complete source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; distribute copy License along Library. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Library portion , thus forming work based Library, copy distribute modifications work terms Section 1 , provided also meet conditions: ) modified work must software library. b) must cause files modified carry prominent notices stating changed files date change. c) must cause whole work licensed charge third parties terms License. d) facility modified Library refers function table data supplied application program uses facility, argument passed facility invoked, must make good faith effort ensure , event application supply function table, facility still operates, performs whatever part purpose remains meaningful. (example, function library compute square roots purpose entirely well-defined independent application. Therefore, Subsection 2d requires application-supplied function table used function must optional: application supply , square root function must still compute square roots.) requirements apply modified work whole. identifiable sections work derived Library, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Library, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Library. addition, mere aggregation another work based Library Library (work based Library) volume storage distribution medium bring work scope License. 3. may opt apply terms ordinary GNU General Public License instead License given copy Library. , must alter notices refer License, refer ordinary GNU General Public License, version 2, instead License. (newer version version 2 ordinary GNU General Public License appeared, can specify version instead wish.) make change notices. change made given copy, irreversible copy, ordinary GNU General Public License applies subsequent copies derivative works made copy. option useful wish copy part code Library program library. 4. may copy distribute Library (portion derivative , Section 2) object code executable form terms Sections 1 2 provided accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange. distribution object code made offering access copy designated place, offering equivalent access copy source code place satisfies requirement distribute source code, even though third parties compelled copy source along object code. 5. program contains derivative portion Library, designed work Library compiled linked , called “work uses Library”. work, isolation, derivative work Library, therefore falls outside scope License. However, linking “work uses Library” Library creates executable derivative Library (contains portions Library), rather “work uses library”. executable therefore covered License. Section 6 states terms distribution executables. “work uses Library” uses material header file part Library, object code work may derivative work Library even though source code . Whether true especially significant work can linked without Library, work library. threshold true precisely defined law. object file uses numerical parameters, data structure layouts accessors, small macros small inline functions (ten lines less length), use object file unrestricted, regardless whether legally derivative work. (Executables containing object code plus portions Library still fall Section 6.) Otherwise, work derivative Library, may distribute object code work terms Section 6. executables containing work also fall Section 6, whether linked directly Library . 6. exception Sections , may also combine link “work uses Library” Library produce work containing portions Library, distribute work terms choice, provided terms permit modification work customer’s use reverse engineering debugging modifications. must give prominent notice copy work Library used Library use covered License. must supply copy License. work execution displays copyright notices, must include copyright notice Library among , well reference directing user copy License. Also, must one things: ) Accompany work complete corresponding machine-readable source code Library including whatever changes used work (must distributed Sections 1 2 ); , work executable linked Library, complete machine-readable “work uses Library”, object code /source code, user can modify Library relink produce modified executable containing modified Library. (understood user changes contents definitions files Library necessarily able recompile application use modified definitions.) b) Use suitable shared library mechanism linking Library. suitable mechanism one (1) uses run time copy library already present user’s computer system, rather copying library functions executable, (2) operate properly modified version library, user installs one, long modified version interface-compatible version work made . c) Accompany work written offer, valid least three years, give user materials specified Subsection 6a, , charge cost performing distribution. d) distribution work made offering access copy designated place, offer equivalent access copy specified materials place. e) Verify user already received copy materials already sent user copy. executable, required form “work uses Library” must include data utility programs needed reproducing executable . However, special exception, materials distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. may happen requirement contradicts license restrictions proprietary libraries normally accompany operating system. contradiction means use Library together executable distribute. 7. may place library facilities work based Library side--side single library together library facilities covered License, distribute combined library, provided separate distribution work based Library library facilities otherwise permitted, provided two things: ) Accompany combined library copy work based Library, uncombined library facilities. must distributed terms Sections . b) Give prominent notice combined library fact part work based Library, explaining find accompanying uncombined form work. 8. may copy, modify, sublicense, link , distribute Library except expressly provided License. attempt otherwise copy, modify, sublicense, link , distribute Library void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 9. required accept License, since signed . However, nothing else grants permission modify distribute Library derivative works. actions prohibited law accept License. Therefore, modifying distributing Library (work based Library), indicate acceptance License , terms conditions copying, distributing modifying Library works based . 10. time redistribute Library (work based Library), recipient automatically receives license original licensor copy, distribute, link modify Library subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 11. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Library . example, patent license permit royalty-free redistribution Library receive copies directly indirectly , way satisfy License refrain entirely distribution Library. portion section held invalid unenforceable particular circumstance, balance section intended apply, section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 12. distribution /use Library restricted certain countries either patents copyrighted interfaces, original copyright holder places Library License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 13. Free Software Foundation may publish revised /new versions Lesser General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Library specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Library specify license version number, may choose version ever published Free Software Foundation. 14. wish incorporate parts Library free programs whose distribution conditions incompatible , write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://caranathunge.github.io/promor/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU Lesser General Public License","text":"15. LIBRARY LICENSED FREE CHARGE, WARRANTY LIBRARY, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE LIBRARY “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE LIBRARY . LIBRARY PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 16. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE LIBRARY PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE LIBRARY (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE LIBRARY OPERATE SOFTWARE), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://caranathunge.github.io/promor/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-libraries","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Libraries","title":"GNU Lesser General Public License","text":"develop new library, want greatest possible use public, recommend making free software everyone can redistribute change. can permitting redistribution terms (, alternatively, terms ordinary General Public License). apply terms, attach following notices library. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. also get employer (work programmer) school, , sign “copyright disclaimer” library, necessary. sample; alter names: ’s !","code":"<one line to give the library's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA Yoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.  <signature of Ty Coon>, 1 April 1990 Ty Coon, President of Vice"},{"path":"https://caranathunge.github.io/promor/articles/intro_to_promor.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to promor","text":"promor user-friendly, comprehensive R package combines proteomics data analysis machine learning-based modeling. promor streamlines differential expression analysis label-free quantification (LFQ) proteomics data building predictive models top protein candidates. promor provides range quality control visualization tools protein level analyze label-free proteomics data. Input files promor proteinGroups.txt file produced MaxQuant standard input file containing quantitative matrix protein intensities expDesign.txt file containing experimental design proteomics data. standard input file tab-delimited text file. Proteins protein groups indicated rows samples columns. Protein names listed first column may use column name choice first column. remaining sample column names match sample names indicated mq_label column expDesign.txt file.","code":""},{"path":"https://caranathunge.github.io/promor/articles/intro_to_promor.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to promor","text":"can install development version promor GitHub :","code":"# install devtools, if you haven't already: install.packages(\"devtools\")  # install promor from github devtools::install_github(\"caranathunge/promor\")"},{"path":"https://caranathunge.github.io/promor/articles/intro_to_promor.html","id":"proteomics-data-analysis-with-promor","dir":"Articles","previous_headings":"","what":"Proteomics data analysis with promor","title":"Introduction to promor","text":"Figure 1. schematic diagram suggested workflows proteomics data analysis promor.","code":""},{"path":"https://caranathunge.github.io/promor/articles/intro_to_promor.html","id":"example","dir":"Articles","previous_headings":"Proteomics data analysis with promor","what":"Example","title":"Introduction to promor","text":"minimal working example showing identify differentially expressed proteins two conditions using promor five simple steps. use previously published data set Cox et al. (2014) (PRIDE ID: PXD000279). Lets take look results using volcano plot.","code":"# Load promor library(promor)  # Create a raw_df object with the files provided in this github account. raw <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg1.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\" )  # Filter out proteins with high levels of missing data in either condition/group raw_filtered <- filterbygroup_na(raw)  # Impute missing data and create an imp_df object. imp_df <- impute_na(raw_filtered)  # Normalize data and create a norm_df object norm_df <- normalize_data(imp_df)  # Perform differential expression analysis and create a fit_df object fit_df <- find_dep(norm_df) volcano_plot(fit_df, text_size = 5)"},{"path":"https://caranathunge.github.io/promor/articles/intro_to_promor.html","id":"modeling-with-promor","dir":"Articles","previous_headings":"","what":"Modeling with promor","title":"Introduction to promor","text":"Figure 2. schematic diagram suggested workflows building predictive models promor.","code":""},{"path":"https://caranathunge.github.io/promor/articles/intro_to_promor.html","id":"example-1","dir":"Articles","previous_headings":"Modeling with promor","what":"Example","title":"Introduction to promor","text":"following minimal working example shows use results differential expression analysis build machine learning-based predictive models using promor. use previously published data set Suvarna et al. (2021) used differentially expressed proteins severe non-severe COVID patients build models predict COVID severity. Let’s make ROC plots check different models performed.","code":"# First, let's make a model_df object of top differentially expressed proteins. # We will be using example fit_df and norm_df objects provided with the package. covid_model_df <- pre_process(   fit_df = covid_fit_df,   norm_df = covid_norm_df ) # Next, we split the data into training and test data sets covid_split_df <- split_data(model_df = covid_model_df)  # Let's train our models using the default list of machine learning algorithms covid_model_list <- train_models(split_df = covid_split_df)  # We can now use our models to predict the test data covid_prob_list <- test_models(   model_list = covid_model_list,   split_df = covid_split_df ) roc_plot(   probability_list = covid_prob_list,   split_df = covid_split_df )"},{"path":"https://caranathunge.github.io/promor/articles/intro_to_promor.html","id":"tutorials","dir":"Articles","previous_headings":"","what":"Tutorials","title":"Introduction to promor","text":"can choose tutorial list best fits experiment structure proteomics data. data contain technical replicates: promor: technical replicates data contains technical replicates: promor: Technical replicates like use proteomics data build predictive models: promor: Modeling","code":""},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Modeling with promor","text":"tutorial shows can use promor build predictive models using top differentially expressed proteins. recommend first go simple working example provided Introduction promor get acquainted promor’s functionality. tutorial proteomics data without technical replicates provided : promor: technical replicates tutorial proteomics data technical replicates provided : promor: Technical replicates","code":"vignette(\"intro_to_promor\")"},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Modeling with promor","text":"tutorial using previously published data set Suvarna et al. (2021). study, authors used differentially expressed proteins 33 severe 18 non-severe COVID patients build models predict COVID severity. , using subset data set (18 severe 18 non-severe COVID patients). build fit_df norm_df objects provided pacakge used tutorial, following analytical steps conducted:","code":"#Create a raw_df object with default settings covid_raw <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg3.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed3.txt\", )  #Filter out proteins with fewer than 66% valid values in either group covid_filt <- filterbygroup_na(covid_raw)  #Impute missing data with the minProb method covid_imp_df <- impute_na(covid_filt)  #Normalize the data with the quantile method covid_norm_df <- normalize_data(covid_imp_df)  #find DE proteins and make a fit_df object covid_fit_df <- find_dep(covid_norm_df)"},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Modeling with promor","text":"Figure 1. schematic diagram showing suggested promor workflow building predictive models protein candidates can access help pages functions shown using ?function_name","code":""},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input data","title":"Modeling with promor","text":"build predictive models promor, need: fit_df object produced running find_dep differential expression analysis. example, using covid_fit_df object provided package. norm_df object data frame normalized protein intensities used input find_dep. using covid_norm_df object provided package.","code":""},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"create-a-model_df-object","dir":"Articles","previous_headings":"","what":"1. Create a model_df object","title":"Modeling with promor","text":"Let’s first create model_df object example fit_df norm_df objects provided package. Notes pre_process function uses information two objects create data frame protein intensities suitable format modeling. run step default options, highly correlated proteins (features) identified removed data frame. Alternatively, can set find_highcorr = FALSE rem_highcorr = FALSE, recommended. can also tweak corr_cutoff change threshold identifying highly correlated proteins. Note: differentially expressed proteins identified given adjusted p-value cutoff, can choose relax criteria use proteins modeling. See ?pre_process information.","code":"# Load promor library(promor)  # Create a model_df object with the top differentially expressed proteins. covid_model_df <- pre_process(   fit_df = covid_fit_df,    norm_df = covid_norm_df )  # Let's take a look at the first few rows of the model_df object head(covid_model_df)"},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"visualize-protein-feature-variation-among-conditions-classes","dir":"Articles","previous_headings":"","what":"2. Visualize protein (feature) variation among conditions (classes)","title":"Modeling with promor","text":"stage, can visualize feature variation among classes using box plots density plots. Notes best proteins (features) modeling show distinct patterns variation among conditions. example, proteins may show mostly non-overlapping density distributions.","code":""},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"feature-plots---box-plots","dir":"Articles","previous_headings":"2. Visualize protein (feature) variation among conditions (classes)","what":"Feature plots - box plots","title":"Modeling with promor","text":"","code":"# Box plots (default) to visualize feature variation feature_plot(   model_df = covid_model_df,   n_row = 4,   n_col = 2 )"},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"feature-plots---density-plots","dir":"Articles","previous_headings":"2. Visualize protein (feature) variation among conditions (classes)","what":"Feature plots - density plots","title":"Modeling with promor","text":"stage, decide remove protein proteins model_df object, can rem_feature.","code":"# Alternatively, make density plots feature_plot(   model_df = covid_model_df,   type = \"density\",   n_row = 4,   n_col = 2 )"},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"split-model_df-object-into-training-and-test-data-sets","dir":"Articles","previous_headings":"","what":"3. Split model_df object into training and test data sets","title":"Modeling with promor","text":"Next, split model_df object training test data sets maintaining class condition proportions set. Notes default, 80% data added training set 20% added test set. can change proportions setting train_size higher lower value. Access items split_df object.","code":"# Create a split_df object by splitting data into training and test data set. Don't forget to fix the random seed for reproducibility. covid_split_df <- split_data(model_df = covid_model_df, seed = 8314) # You can access the items in the training data set as follows, covid_split_df$training  # Similarly, access the test data set covid_split_df$test"},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"train-machine-learning-models-on-the-training-data-set","dir":"Articles","previous_headings":"","what":"4. Train machine learning models on the training data set","title":"Modeling with promor","text":"using functions caret package train models training data set. Notes list available machine learning algorithms can found : http://topepo.github.io/caret/train-models--tag.html. Note algorithms may require additional arguments. See caret functions train trainControl details. \"svmRadial\" - support vector machine algorithm \"glm\"- generalized linear model algorithm \"rf\" - random forest algorithm \"xgbLinear\" - extreme gradient boosting algorithm","code":"# Create a model_list object by training models on the training data set using a custom list of algorithms.Don't forget to fix the random seed for reproducibility. covid_model_list <- train_models(split_df = covid_split_df,                                    algorithm_list = c(\"svmLinear\", \"rf\", \"naive_bayes\", \"knn\"),                                  seed = 351)"},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"check-model-performance","dir":"Articles","previous_headings":"","what":"5. Check model performance","title":"Modeling with promor","text":"can now check models built algorithm performed resamples training data set.","code":""},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"performance-plots---box-plots","dir":"Articles","previous_headings":"5. Check model performance","what":"Performance plots - box plots","title":"Modeling with promor","text":"","code":"# Box plots (default) to visualize model performance performance_plot(model_list = covid_model_list)"},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"performance-plots---dot-plots","dir":"Articles","previous_headings":"5. Check model performance","what":"Performance plots - dot plots","title":"Modeling with promor","text":"*looks like “knn” “naive_bayes” methods performed fairly well.","code":"# Make dot plots performance_plot(   model_list = covid_model_list,   type = \"dot\" )"},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"check-variable-importance","dir":"Articles","previous_headings":"","what":"6. Check variable importance","title":"Modeling with promor","text":"can check proteins 8 important models.","code":""},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"variable-importance-plots---lollipop-plots","dir":"Articles","previous_headings":"6. Check variable importance","what":"Variable importance plots - lollipop plots","title":"Modeling with promor","text":"","code":"# Make lollipop plots (default) varimp_plot(   model_list = covid_model_list,   text_size = 7,   n_row = 2,   n_col = 2 )"},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"variable-importance-plots---bar-plots","dir":"Articles","previous_headings":"6. Check variable importance","what":"Variable importance plots - bar plots","title":"Modeling with promor","text":"stage can use rem_feature function remove proteins lower importance models repeat steps Step 3.","code":"# Make bar plots varimp_plot(   model_list = covid_model_list,   type = \"bar\",   text_size = 7,   n_row = 2,   n_col = 2 )"},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"test-models-on-the-test-data-set","dir":"Articles","previous_headings":"","what":"7. Test models on the test data set","title":"Modeling with promor","text":"now ready test models never--seen data test data set. Alternatively, can output list predictions output confusion matrix analysis.","code":"# First we run the function with type = \"prob\" to get a probability list covid_prob_list <- test_models(   model_list = covid_model_list,   split_df = covid_split_df,   type = \"prob\" ) # We run the function with type = \"raw\" to get a prediction list and output a confusion matrix. You can also provide a file path to save the text file in in your preferred directory. In this example, we are saving our text file in the working directory. covid_pred_list <- test_models(   model_list = covid_model_list,   split_df = covid_split_df,   type = \"raw\",   save_confusionmatrix = TRUE,   file_path = \".\" )"},{"path":"https://caranathunge.github.io/promor/articles/promor_for_modeling.html","id":"build-receiver-operating-characteristic-roc-curves","dir":"Articles","previous_headings":"","what":"8. Build Receiver Operating Characteristic (ROC) curves","title":"Modeling with promor","text":"Finally, can build ROC plots assess predictive power models. Notes roc_plot function requires probability_list object. Make sure set type = \"prob\" running test_models output probability_list object.  Save copy plot working directory.","code":"# Make roc curves roc_plot(   probability_list = covid_prob_list,   split_df = covid_split_df ) # Make roc curves roc_plot(   probability_list = covid_prob_list,   split_df = covid_split_df,   save = TRUE,   file_path = \".\" )"},{"path":"https://caranathunge.github.io/promor/articles/promor_no_techreps.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Proteomics data analysis: no technical replicates)","text":"tutorial shows can use promor analyse label-free quantification (LFQ) proteomics data contain technical replicates. recommend first go simple working example provided Introduction promor get acquainted promor's functionality. tutorial proteomics data containing technical replicates provided : promor: Technical replicates tutorial using previously published data set Cox et al. (2014).","code":"vignette(\"intro_to_promor\")"},{"path":"https://caranathunge.github.io/promor/articles/promor_no_techreps.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Proteomics data analysis: no technical replicates)","text":"Figure 1. schematic diagram highlighting suggested promor workflow proteomics data without technical replicates can access help pages functions shown using ?function_name","code":""},{"path":"https://caranathunge.github.io/promor/articles/promor_no_techreps.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input data","title":"Proteomics data analysis: no technical replicates)","text":"run promor, need: proteinGroups.txt file produced MaxQuant standard input file containing quantitative matrix protein intensities. expDesign.txt file contains experimental design. proteinGroups.txt one output files generated MaxQuant program. tab-delimited file contains information identified proteins peptide data. information contents can found MaxQuant Documentation. Standard input file tab-delimited text file. Proteins protein groups indicated rows samples columns. Protein names listed first column may use column name choice first column. remaining sample column names match sample names indicated mq_label column expDesign.txt file. expDesign.txt file tab-delimited text file contains design experiment. Note create provide file run promor data. Let’s take look sample expDesign.txt file using tutorial. mq_label sample label provided running MaxQuant. can easily find proteinGroups.txt file. Hint: LFQ intensity columns, term “LFQ intensity” immediately followed label provided running MaxQuant. mq_label. using standard input file instead proteinGroups.txt file, mq_label match column headers sample columns. condition condition group samples belong . example “H” refers HeLa cells, “L” refers E. coli cells. sample_ID unique identifier sample. tech_rep number denoting technical replicate number. example, technical replicates, column left blank.","code":"# Load promor library(promor) # Let's load the expDesign.txt file exp_design <- read.csv(\"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\", sep = \"\\t\") # Take a peek inside the file head(exp_design)"},{"path":"https://caranathunge.github.io/promor/articles/promor_no_techreps.html","id":"create-a-raw_df-object","dir":"Articles","previous_headings":"","what":"1. Create a raw_df object","title":"Proteomics data analysis: no technical replicates)","text":"Let’s first create raw_df object input files. using proteinGroups.txt file expDesign.txt file. default intensity data type use “LFQ”, LFQ intensity columns extracted proteinGroups.txt file. Instead using LFQ intensity values, can choose extract data types iBAQ proteinGroups.txt file follows: Instead using proteinGroups.txt file, can choose use standard input file containing quantitative matrix protein intensities. ran create_df default settings using either type input files, now raw_df object contains log2 transformed protein intensity values. Run ?create_df information available arguments.","code":"# Create a raw_df object with default settings. raw <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg1.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\" ) #> 0 empty row(s) removed. #> 0 empty column(s) removed. #> 80 protein(s) (rows) only identified by site removed. #> 65 reverse protein(s) (rows) removed. #> 42 protein potential contaminant(s) (rows) removed. #> 1923 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.   # We can quickly check the dimensions of the data frame dim(raw) #> [1] 4584    6 # Create a raw_df object of ibaq values raw_1 <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg1.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\",   data_type = \"iBAQ\" ) #> 0 empty row(s) removed. #> 0 empty column(s) removed. #> 80 protein(s) (rows) only identified by site removed. #> 65 reverse protein(s) (rows) removed. #> 42 protein potential contaminant(s) (rows) removed. #> 1923 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.   # We can quickly check the first five rows of the data frame head(raw_1) # Create a raw_df object using a standard input file. raw_2 <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/st.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\",   input_type = \"standard\" ) #> 0 empty row(s) removed. #> 0 empty column(s) removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.   #check the first five rows of the data frame head(raw_2)"},{"path":"https://caranathunge.github.io/promor/articles/promor_no_techreps.html","id":"filter-proteins-by-groupwise-missing-data","dir":"Articles","previous_headings":"","what":"2. Filter proteins by groupwise missing data","title":"Proteomics data analysis: no technical replicates)","text":"Next, remove proteins 0.4% (default 0.33%) missing data either group (using raw_df object created default settings input).","code":"# Filter out proteins with high levels of missing data in either condition raw_filtered <- filterbygroup_na(raw, set_na = 0.4) #> 224 proteins with higher than 40% NAs in at least one group removed.  # We can check the dimensions of the new data frame. Note that the number of rows have changed. dim(raw_filtered) #> [1] 4360    6"},{"path":"https://caranathunge.github.io/promor/articles/promor_no_techreps.html","id":"visualize-missing-data","dir":"Articles","previous_headings":"","what":"3. Visualize missing data","title":"Proteomics data analysis: no technical replicates)","text":"Now, going see missing data distributed data. help us make informed decision impute missing data next step.  Note proteins alphabetically ordered default, rather order mean intensity check proteins low intensities likely missing data, can following:  larger data sets, can choose visualize subsets data","code":"# Visualize missing data in a subset of proteins. heatmap_na(raw_filtered, palette = \"mako\") # Order proteins by mean intensity. heatmap_na(raw_filtered, reorder_y = TRUE, palette = \"mako\") # Visualize missing data in a subset of proteins. heatmap_na(raw_filtered, protein_range = 40:70, label_proteins = TRUE, palette = \"mako\")"},{"path":"https://caranathunge.github.io/promor/articles/promor_no_techreps.html","id":"impute-missing-data","dir":"Articles","previous_headings":"","what":"4. Impute missing data","title":"Proteomics data analysis: no technical replicates)","text":"promor provides multiple missing data imputation methods. Default minProb, assumes missing data MNAR (Missing Random) type left-censored missing values, imputes random draws Gaussian distribution centered minimal value. information available imputation methods can found Lazar et al. (2016). Alternatively, can use different imputation method follows. Note: missing data imputation methods ‘kNN’ require data normalized prior imputation.","code":"# Impute missing data with minProb method. Don't forget to fix the random seed for reproducibility. imp_df_mp <- impute_na(raw_filtered, seed = 327) # Impute missing data with minDet method. Don't forget to fix the random seed for reproducibility. imp_df_md <- impute_na(raw_filtered, method = \"minDet\", seed = 327)"},{"path":"https://caranathunge.github.io/promor/articles/promor_no_techreps.html","id":"visualize-imputed-data","dir":"Articles","previous_headings":"","what":"5. Visualize imputed data","title":"Proteomics data analysis: no technical replicates)","text":"can now visualize impact imputation data set. Lets check data imputed minProb method.  can also visualize impact imputation sample’s intensity data setting global = FALSE.  looks like, samples, imputation changed distribution data much, good sign.","code":"# Visualize the imputed data with sample-wise density plots. impute_plot(original = raw_filtered, imputed = imp_df_mp, n_row = 3, n_col = 3, palette = \"mako\") # Visualize the imputed data with sample-wise density plots. impute_plot(original = raw_filtered, imputed = imp_df_mp, global = FALSE, n_row = 3, n_col = 3, palette = \"mako\")"},{"path":"https://caranathunge.github.io/promor/articles/promor_no_techreps.html","id":"normalize-data","dir":"Articles","previous_headings":"","what":"6. Normalize data","title":"Proteomics data analysis: no technical replicates)","text":"Note: MaxQuant already normalized protein intensities using MaxLFQ algorithm, normalization may necessary data set. Steps 6 7 performed visualization purposes . normalize imputed data default quantile method:","code":"norm_df <- normalize_data(imp_df_mp)"},{"path":"https://caranathunge.github.io/promor/articles/promor_no_techreps.html","id":"visualize-normalized-data","dir":"Articles","previous_headings":"","what":"7. Visualize normalized data","title":"Proteomics data analysis: no technical replicates)","text":"Let’s check results quantile normalization.  samples show little variability among , data set, may difficult visualize effect normalization boxplots (Remember, data set already normalized MaxLFQ algorithm within MaxQuant program). Let’s use type = \"density visualize effect normalization density plots instead.","code":"norm_plot(original = imp_df_mp, normalized = norm_df, palette = \"mako\") norm_plot(original = imp_df_mp, normalized = norm_df, type = \"density\", palette = \"mako\")"},{"path":"https://caranathunge.github.io/promor/articles/promor_no_techreps.html","id":"identify-differentially-expressed-proteins","dir":"Articles","previous_headings":"","what":"8. Identify differentially expressed proteins","title":"Proteomics data analysis: no technical replicates)","text":"using non-normalized imp_df object created Step 4 perform differential expression analysis. can also choose save top 10 hits text file follows:","code":"fit_df <- find_dep(imp_df_mp) #> 1294 siginificantly differentially expressed proteins found. fit_df <- find_dep(imp_df_mp, save_tophits = TRUE, n_top = 10)"},{"path":"https://caranathunge.github.io/promor/articles/promor_no_techreps.html","id":"generate-a-volcano-plot","dir":"Articles","previous_headings":"","what":"9. Generate a volcano plot","title":"Proteomics data analysis: no technical replicates)","text":"Let’s visualize results Step 8 using volcano plot.","code":"volcano_plot(fit_df,   text_size = 5,   palette = \"mako\" )"},{"path":"https://caranathunge.github.io/promor/articles/promor_no_techreps.html","id":"create-a-heatmap-of-differentially-expressed-proteins","dir":"Articles","previous_headings":"","what":"10. Create a heatmap of differentially expressed proteins","title":"Proteomics data analysis: no technical replicates)","text":"Save copy plot working directory.","code":"heatmap_de(fit_df, imp_df_mp, palette = \"mako\") heatmap_de(fit_df, imp_df_mp, palette = \"mako\", save = TRUE, file_path = \".\")"},{"path":"https://caranathunge.github.io/promor/articles/promor_with_techreps.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Proteomics data analysis: technical replicates","text":"tutorial shows can use promor analyse label-free quantification (LFQ) proteomics data contains technical replicates. recommend first go simple working example provided Introduction promor get acquainted promor’s functionality. tutorial proteomics data without technical replicates provided : promor: technical replicates tutorial using previously published data set Ramond et al. (2015). experiment two conditions groups (D8 WT) three biological replicates , three technical replicates biological replicate.","code":"vignette(\"intro_to_promor\")"},{"path":"https://caranathunge.github.io/promor/articles/promor_with_techreps.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Proteomics data analysis: technical replicates","text":"Figure 1. schematic diagram highlighting suggested promor workflow proteomics data technical replicates can access help pages functions shown using ?function_name","code":""},{"path":"https://caranathunge.github.io/promor/articles/promor_with_techreps.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input data","title":"Proteomics data analysis: technical replicates","text":"run promor, need: proteinGroups.txt file produced MaxQuant standard input file containing quantitative matrix protein intensities. expDesign.txt file contains experimental design. proteinGroups.txt one output files generated MaxQuant program. tab-delimited file contains information identified proteins peptide data. information contents can found MaxQuant Documentation. Standard input file tab-delimited text file. Proteins protein groups indicated rows samples columns. Protein names listed first column may use column name choice first column. remaining sample column names match sample names indicated mq_label column expDesign.txt file. expDesign.txt file tab-delimited text file contains design experiment. Note create provide file run promor data. Let’s take look sample expDesign.txt file using tutorial. mq_label sample label provided running MaxQuant. can easily find proteinGroups.txt file. Hint: LFQ intensity columns, term “LFQ intensity” immediately followed label provided running MaxQuant. mq_label. using standard input file instead proteinGroups.txt file, mq_label match column headers sample columns. condition condition group samples belong . example “D8” refers ∆argP mutant cell line Arginine Transporter inactivated “WT” refers Wild Type cells. sample_ID unique identifier sample biological replicate. tech_rep number denoting technical replicate number. example, three technical replicates biological replicate (see sample_ID).","code":"# Load promor library(promor) # Let's load the expDesign.txt file exp_design <- read.csv(\"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed2.txt\", sep = \"\\t\") # Take a peek inside the file head(exp_design, n = 12)"},{"path":"https://caranathunge.github.io/promor/articles/promor_with_techreps.html","id":"create-a-raw_df-object","dir":"Articles","previous_headings":"","what":"1. Create a raw_df object","title":"Proteomics data analysis: technical replicates","text":"Let’s first create raw_df object input files. using proteinGroups.txt file produced MaxQuant. Note: indicated data include technical replicates tech_reps = TRUE. ran create_df default settings, now raw_df object contains log2 transformed LFQ protein intensity values zeros converted NAs. Run ?create_df information available arguments.","code":"# Create a raw_df object with default settings. raw <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg2.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed2.txt\",   tech_reps = TRUE ) #> 0 empty row(s) removed. #> 1 empty column(s) removed. #> 12 reverse protein(s) (rows) removed. #> 29 protein contaminant(s) (rows) removed. #> 188 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed. # We can quickly check how the data frame looks like head(raw)"},{"path":"https://caranathunge.github.io/promor/articles/promor_with_techreps.html","id":"correlation-plots-technical-replicates","dir":"Articles","previous_headings":"","what":"2. Correlation plots: technical replicates","title":"Proteomics data analysis: technical replicates","text":"Typically, technical replicates sample show strong correlation. stage, can quickly check case experiment.  Similarly, can visualize correlation technical replicates 1 3.  can repeat analysis technical replicates 2 3 manner. Additionally, identify pairs technical replicates weak correlation, samples technical replicates can easily removed rem_sample stage. technical replicates appear show strong correlation, therefore use three per sample calculate average intensities next step.","code":"# Let's first check the correlation between tech.replicates 1 and 2 corr_plot(raw, rep_1 = 1, rep_2 = 2, n_row = 3, n_col = 2, text_size = 12) # Correlation between tech.replicates 1 and 3. corr_plot(raw, rep_1 = 1, rep_2 = 3, n_row = 3, n_col = 2, text_size = 12)"},{"path":"https://caranathunge.github.io/promor/articles/promor_with_techreps.html","id":"average-intensities-across-technical-replicates","dir":"Articles","previous_headings":"","what":"3. Average intensities across technical replicates","title":"Proteomics data analysis: technical replicates","text":"Now, ready calculate average intensity across technical replicates sample.","code":"raw_ave <- aver_techreps(raw)  # A quick check on the dimensions of the data frame show that the number of columns is reduced from 18 to 6 as we averaged the tech.replicates. dim(raw_ave) #> [1] 1036    6"},{"path":"https://caranathunge.github.io/promor/articles/promor_with_techreps.html","id":"filter-proteins-by-groupwise-missing-data","dir":"Articles","previous_headings":"","what":"4. Filter proteins by groupwise missing data","title":"Proteomics data analysis: technical replicates","text":"Next, remove proteins 0.4% (default 0.33%) missing data either group.","code":"# Filter out proteins with high levels of missing data in either condition raw_filtered <- filterbygroup_na(raw_ave, set_na = 0.40) #> 197 proteins with higher than 40% NAs in at least one group removed.  # We can check the dimensions of the new data frame. Note that the number of rows has changed. dim(raw_filtered) #> [1] 839   6"},{"path":"https://caranathunge.github.io/promor/articles/promor_with_techreps.html","id":"visualize-missing-data","dir":"Articles","previous_headings":"","what":"5. Visualize missing data","title":"Proteomics data analysis: technical replicates","text":"Now, going see missing data distributed data.  can reorder proteins mean intensity see proteins low intensity show higher levels missing data  larger data sets, can choose visualize subsets data.","code":"# Visualize missing data in a subset of proteins. heatmap_na(raw_filtered) # Visualize missing data in a subset of proteins. heatmap_na(raw_filtered, reorder_y = TRUE) # Visualize missing data in a subset of proteins. heatmap_na(raw_filtered, protein_range = 1:30, label_proteins = TRUE)"},{"path":"https://caranathunge.github.io/promor/articles/promor_with_techreps.html","id":"impute-missing-data","dir":"Articles","previous_headings":"","what":"6. Impute missing data","title":"Proteomics data analysis: technical replicates","text":"promor provides multiple missing data imputation methods. Default minProb, assumes missing data MNAR (Missing Random) type. information available imputation methods can found Lazar et al. (2016). Note: missing data imputation methods ‘kNN’ require data normalized prior imputation.","code":"# Impute missing data with minProb method. Don't forget to fix the random seed for reproducibility. imp_df_mp <- impute_na(raw_filtered, seed = 327)"},{"path":"https://caranathunge.github.io/promor/articles/promor_with_techreps.html","id":"visualize-imputed-data","dir":"Articles","previous_headings":"","what":"7. Visualize imputed data","title":"Proteomics data analysis: technical replicates","text":"can now visualize impact imputation intensity data. Lets check data imputed minProb method.  looks like distribution data impacted imputation much. can also visualize imputed data sample density plots.","code":"# Visualize the imputed data with a density plot. impute_plot(original = raw_filtered, imputed = imp_df_mp, global = TRUE) # Visualize the imputed data with sample-wise density plots. impute_plot(original = raw_filtered, imputed = imp_df_mp, global = FALSE, n_row = 3, n_col = 2)"},{"path":"https://caranathunge.github.io/promor/articles/promor_with_techreps.html","id":"normalize-data","dir":"Articles","previous_headings":"","what":"8. Normalize data","title":"Proteomics data analysis: technical replicates","text":"Note: MaxQuant already normalized protein intensities using MaxLFQ algorithm, normalization may necessary data set. Steps 8 9 performed visualization purposes . Next, normalize imputed data default quantile method.","code":"norm_df <- normalize_data(imp_df_mp)"},{"path":"https://caranathunge.github.io/promor/articles/promor_with_techreps.html","id":"visualize-normalized-data","dir":"Articles","previous_headings":"","what":"9. Visualize normalized data","title":"Proteomics data analysis: technical replicates","text":"Let’s check data set successfully normalized density plot.","code":"norm_plot(original = imp_df_mp, normalized = norm_df, type = \"density\")"},{"path":"https://caranathunge.github.io/promor/articles/promor_with_techreps.html","id":"identify-differentially-expressed-proteins","dir":"Articles","previous_headings":"","what":"10. Identify differentially expressed proteins","title":"Proteomics data analysis: technical replicates","text":"using non-normalized imp_df object created Step 6 perform differential expression analysis. can also choose save top 10 hits text file follows:","code":"fit_df <- find_dep(imp_df_mp) #> 2 siginificantly differentially expressed proteins found. fit_df <- find_dep(imp_df_mp, save_tophits = TRUE, n_top = 10)"},{"path":"https://caranathunge.github.io/promor/articles/promor_with_techreps.html","id":"generate-a-volcano-plot","dir":"Articles","previous_headings":"","what":"11. Generate a volcano plot","title":"Proteomics data analysis: technical replicates","text":"Let’s visualize results Step 10 using volcano plot.","code":"volcano_plot(fit_df)"},{"path":"https://caranathunge.github.io/promor/articles/promor_with_techreps.html","id":"create-a-heatmap-of-differentially-expressed-proteins","dir":"Articles","previous_headings":"","what":"12. Create a heatmap of differentially expressed proteins","title":"Proteomics data analysis: technical replicates","text":"can also visualize top hits Step 10 heatmap.  Save copy plot working directory","code":"heatmap_de(fit_df, imp_df_mp) heatmap_de(fit_df, imp_df_mp, save = TRUE, file_path = \".\")"},{"path":"https://caranathunge.github.io/promor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chathurani Ranathunge. Author, maintainer, copyright holder.","code":""},{"path":"https://caranathunge.github.io/promor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ranathunge, C.; Patel, S.S.; Pinky, L.; Correll, V.L.; Semmes, O.J.; Armstrong, R.K.; Combs, C.D.; Nyalwidhe, J.O. promor: comprehensive R package label-free proteomics data analysis predictive modeling. bioRxiv 2022.","code":"@Article{,   title = {promor: a comprehensive R package for label-free proteomics data analysis and predictive modeling},   author = {{Ranathunge} and {Chathurani} and {Patel} and Sagar S. and {Pinky} and {Lubna} and {Correll} and Vanessa L. and {Semmes} and O. John and {Armstrong} and Robert K. and {Combs} and C. Donald and {Nyalwidhe} and Julius O.},   journal = {bioRxiv},   year = {2022},   url = {https://www.biorxiv.org/content/10.1101/2022.08.17.503867v1}, }"},{"path":[]},{"path":"https://caranathunge.github.io/promor/index.html","id":"proteomics-data-analysis-and-modeling-tools","dir":"","previous_headings":"","what":"Proteomics Data Analysis and Modeling Tools","title":"Proteomics Data Analysis and Modeling Tools","text":"promor user-friendly, comprehensive R package combines proteomics data analysis machine learning-based modeling. promor streamlines differential expression analysis label-free quantification (LFQ) proteomics data building predictive models top protein candidates. promor provide range quality control visualization tools analyze label-free proteomics data protein level. Input files promor proteinGroups.txt file produced MaxQuant standard input file containing quantitative matrix protein intensities expDesign.txt file containing experimental design proteomics data. standard input file tab-delimited text file. Proteins protein groups indicated rows samples columns. Protein names listed first column may use column name choice first column. remaining sample column names match sample names indicated mq_label column expDesign.txt file. 🚨Check R Shiny app: PROMOR App","code":""},{"path":"https://caranathunge.github.io/promor/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Proteomics Data Analysis and Modeling Tools","text":"Install released version CRAN Install development version GitHub","code":"install.packages(\"promor\") # install devtools, if you haven't already: install.packages(\"devtools\")  # install promor from github devtools::install_github(\"caranathunge/promor\")"},{"path":"https://caranathunge.github.io/promor/index.html","id":"proteomics-data-analysis-with-promor","dir":"","previous_headings":"","what":"Proteomics data analysis with promor","title":"Proteomics Data Analysis and Modeling Tools","text":"Figure 1. schematic diagram suggested workflows proteomics data analysis promor.","code":""},{"path":"https://caranathunge.github.io/promor/index.html","id":"example","dir":"","previous_headings":"Proteomics data analysis with promor","what":"Example","title":"Proteomics Data Analysis and Modeling Tools","text":"minimal working example showing identify differentially expressed proteins two conditions using promor five simple steps. use previously published data set Cox et al. (2014) (PRIDE ID: PXD000279). Lets take look results using volcano plot.","code":"# Load promor library(promor)  # Create a raw_df object with the files provided in this github account. raw <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg1.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\" )  # Filter out proteins with high levels of missing data in either condition or group raw_filtered <- filterbygroup_na(raw)  # Impute missing data and create an imp_df object. imp_df <- impute_na(raw_filtered)  # Normalize data and create a norm_df object norm_df <- normalize_data(imp_df)  # Perform differential expression analysis and create a fit_df object fit_df <- find_dep(norm_df) volcano_plot(fit_df, text_size = 5)"},{"path":"https://caranathunge.github.io/promor/index.html","id":"modeling-with-promor","dir":"","previous_headings":"","what":"Modeling with promor","title":"Proteomics Data Analysis and Modeling Tools","text":"Figure 2. schematic diagram suggested workflows building predictive models promor.","code":""},{"path":"https://caranathunge.github.io/promor/index.html","id":"example-1","dir":"","previous_headings":"Modeling with promor","what":"Example","title":"Proteomics Data Analysis and Modeling Tools","text":"following minimal working example shows use results differential expression analysis build machine learning-based predictive models using promor. use previously published data set Suvarna et al. (2021) used differentially expressed proteins severe non-severe COVID patients build models predict COVID severity. Let’s make ROC plots check different models performed.","code":"# First, let's make a model_df object of top differentially expressed proteins. # We will be using example fit_df and norm_df objects provided with the package. covid_model_df <- pre_process(   fit_df = covid_fit_df,   norm_df = covid_norm_df )  # Next, we split the data into training and test data sets covid_split_df <- split_data(model_df = covid_model_df)  # Let's train our models using the default list of machine learning algorithms covid_model_list <- train_models(split_df = covid_split_df)  # We can now use our models to predict the test data covid_prob_list <- test_models(   model_list = covid_model_list,   split_df = covid_split_df ) roc_plot(   probability_list = covid_prob_list,   split_df = covid_split_df )"},{"path":"https://caranathunge.github.io/promor/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"Proteomics Data Analysis and Modeling Tools","text":"can choose tutorial list best fits experiment structure proteomics data. README file can accessed RStudio follows, data contain technical replicates: promor: technical replicates data contain technical replicates: promor: Technical replicates like use proteomics data build predictive models: promor: Modeling","code":"vignette(\"intro_to_promor\", package = \"promor\")"},{"path":"https://caranathunge.github.io/promor/reference/aver_techreps.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute average intensity — aver_techreps","title":"Compute average intensity — aver_techreps","text":"function computes average intensities across technical replicates sample.","code":""},{"path":"https://caranathunge.github.io/promor/reference/aver_techreps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute average intensity — aver_techreps","text":"","code":"aver_techreps(raw_df)"},{"path":"https://caranathunge.github.io/promor/reference/aver_techreps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute average intensity — aver_techreps","text":"raw_df raw_df object containing technical replicates.","code":""},{"path":"https://caranathunge.github.io/promor/reference/aver_techreps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute average intensity — aver_techreps","text":"raw_df object averaged intensities.","code":""},{"path":"https://caranathunge.github.io/promor/reference/aver_techreps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute average intensity — aver_techreps","text":"aver_techreps assumes column names data frame follow \"Group_UniqueSampleID_TechnicalReplicate\" notation. (Use head(raw_df) see structure raw_df object.)","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/aver_techreps.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute average intensity — aver_techreps","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/aver_techreps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute average intensity — aver_techreps","text":"","code":"## Use a data set containing technical replicates to create a raw_df object raw_df <- create_df( prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg2.txt\", exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed2.txt\", tech_reps = TRUE ) #> 0 empty row(s) removed. #> 1 empty column(s) removed. #> 12 reverse protein(s) (rows) removed. #> 29 protein contaminant(s) (rows) removed. #> 188 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.  # Compute average intensities across technical replicates. rawdf_ave <- aver_techreps(raw_df)"},{"path":"https://caranathunge.github.io/promor/reference/corr_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation between technical replicates — corr_plot","title":"Correlation between technical replicates — corr_plot","text":"function generates scatter plots visualize correlation given pair technical replicates (Eg: 1 vs 2) sample.","code":""},{"path":"https://caranathunge.github.io/promor/reference/corr_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation between technical replicates — corr_plot","text":"","code":"corr_plot(   raw_df,   rep_1,   rep_2,   save = FALSE,   file_type = \"pdf\",   palette = \"viridis\",   text_size = 5,   n_row = 4,   n_col = 4,   dpi = 80,   file_path = NULL )"},{"path":"https://caranathunge.github.io/promor/reference/corr_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation between technical replicates — corr_plot","text":"raw_df raw_df object (output create_df) containing technical replicates. rep_1 Numerical. Technical replicate number. rep_2 Numerical. Number second technical replicate compare rep1. save Logical. TRUE saves copy plot directory provided file_path. file_type File type save scatter plots. Default \"pdf\". palette Viridis color palette option plots. Default \"viridis\". See viridis available options. text_size Text size plot labels, axis labels etc. Default 10. n_row Numerical. Number plots print row single page. Default 4. n_col Numerical. Number plots print column single page. Default 4. dpi Plot resolution. Default 80. file_path string containing directory path save file.","code":""},{"path":"https://caranathunge.github.io/promor/reference/corr_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlation between technical replicates — corr_plot","text":"list ggplot2 plot objects.","code":""},{"path":"https://caranathunge.github.io/promor/reference/corr_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correlation between technical replicates — corr_plot","text":"Note: n_row * n_col equal number samples display single page.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/corr_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Correlation between technical replicates — corr_plot","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/corr_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation between technical replicates — corr_plot","text":"","code":"## Use a data set containing technical replicates to create a raw_df object raw_df <- create_df( prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg2.txt\", exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed2.txt\", tech_reps = TRUE ) #> 0 empty row(s) removed. #> 1 empty column(s) removed. #> 12 reverse protein(s) (rows) removed. #> 29 protein contaminant(s) (rows) removed. #> 188 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.   # \\donttest{ ## Compare technical replicates 1 vs. 2 for all samples corr_plot(raw_df, rep_1 = 1, rep_2 = 2) #> Warning: Removed 285 rows containing missing values (`geom_point()`). #> Warning: Removed 285 rows containing missing values (`geom_text()`). #> Warning: Removed 302 rows containing missing values (`geom_point()`). #> Warning: Removed 302 rows containing missing values (`geom_text()`). #> Warning: Removed 259 rows containing missing values (`geom_point()`). #> Warning: Removed 259 rows containing missing values (`geom_text()`). #> Warning: Removed 352 rows containing missing values (`geom_point()`). #> Warning: Removed 352 rows containing missing values (`geom_text()`). #> Warning: Removed 249 rows containing missing values (`geom_point()`). #> Warning: Removed 249 rows containing missing values (`geom_text()`). #> Warning: Removed 303 rows containing missing values (`geom_point()`). #> Warning: Removed 303 rows containing missing values (`geom_text()`).  # }"},{"path":"https://caranathunge.github.io/promor/reference/covid_fit_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Suvarna et al 2021 LFQ data (fit object) — covid_fit_df","title":"Suvarna et al 2021 LFQ data (fit object) — covid_fit_df","text":"object class \"MArrayLM\" running find_dep covid_norm_df","code":""},{"path":"https://caranathunge.github.io/promor/reference/covid_fit_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suvarna et al 2021 LFQ data (fit object) — covid_fit_df","text":"","code":"data(covid_fit_df)"},{"path":"https://caranathunge.github.io/promor/reference/covid_fit_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Suvarna et al 2021 LFQ data (fit object) — covid_fit_df","text":"object class \"MArrayLM\"","code":""},{"path":"https://caranathunge.github.io/promor/reference/covid_fit_df.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Suvarna et al 2021 LFQ data (fit object) — covid_fit_df","text":"https://www.frontiersin.org/articles/10.3389/fphys.2021.652799/full#h3","code":""},{"path":"https://caranathunge.github.io/promor/reference/covid_norm_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Suvarna et al 2021 LFQ data (normalized) — covid_norm_df","title":"Suvarna et al 2021 LFQ data (normalized) — covid_norm_df","text":"dataframe containing normalized LFQ protein intensity data 230 proteins 35 samples (subset original data set)","code":""},{"path":"https://caranathunge.github.io/promor/reference/covid_norm_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suvarna et al 2021 LFQ data (normalized) — covid_norm_df","text":"","code":"data(covid_norm_df)"},{"path":"https://caranathunge.github.io/promor/reference/covid_norm_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Suvarna et al 2021 LFQ data (normalized) — covid_norm_df","text":"data frame 230 rows (proteins) 35 columns (samples)","code":""},{"path":"https://caranathunge.github.io/promor/reference/covid_norm_df.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Suvarna et al 2021 LFQ data (normalized) — covid_norm_df","text":"https://www.frontiersin.org/articles/10.3389/fphys.2021.652799/full#h3","code":""},{"path":"https://caranathunge.github.io/promor/reference/create_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of protein intensities — create_df","title":"Create a data frame of protein intensities — create_df","text":"function creates data frame protein intensities","code":""},{"path":"https://caranathunge.github.io/promor/reference/create_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of protein intensities — create_df","text":"","code":"create_df(   prot_groups,   exp_design,   input_type = \"MaxQuant\",   data_type = \"LFQ\",   filter_na = TRUE,   filter_prot = TRUE,   uniq_pep = 2,   tech_reps = FALSE,   zero_na = TRUE,   log_tr = TRUE,   base = 2 )"},{"path":"https://caranathunge.github.io/promor/reference/create_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of protein intensities — create_df","text":"prot_groups File path proteinGroups.txt file produced MaxQuant standard input file containing quantitative matrix proteins protein groups indicated rows samples columns. exp_design File path text file containing experimental design. input_type Type input file indicated prot_groups. Available options : \"MaxQuant\", proteinGroups.txt file used, \"standard\" standard input file used. Default \"MaxQuant.\" data_type Type sample protein intensity data columns use proteinGroups.txt file. available options \"LFQ\", \"iBAQ\", \"Intensity\". Default \"LFQ.\" User-defined prefixes proteinGroups.txt file also allowed. data_type argument case-sensitive, applies input_type = \"MaxQuant\". filter_na Logical. TRUE(default), filters empty rows columns data frame. filter_prot Logical. TRUE (default), filters reverse proteins, proteins identified site, potential contaminants, proteins identified less minimum number unique peptides indicated uniq_pep. applies input_type = \"MaxQuant\". uniq_pep Numerical. minimum number unique peptides required identify protein (default 2). Proteins identified less number unique peptides filtered . applies input_type = \"MaxQuant\". tech_reps Logical. Indicate TRUE technical replicates present data. Default FALSE. zero_na Logical. TRUE (default), zeros considered missing values replaced NAs. log_tr Logical. TRUE (default), intensity values log transformed base indicated base. base Numerical. Logarithm base. Default 2.","code":""},{"path":"https://caranathunge.github.io/promor/reference/create_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of protein intensities — create_df","text":"raw_df object data frame containing protein intensities. Proteins protein groups indicated rows samples columns.","code":""},{"path":"https://caranathunge.github.io/promor/reference/create_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a data frame of protein intensities — create_df","text":"reads expDesign.txt file provided exp_design extracts relevant information add data frame. example expDesign.txt provided : https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt. First, empty rows columns removed data frame. Next, proteinGroups.txt file used, filters reverse proteins, proteins identified site, potential contaminants.removes proteins identified less number unique peptides indicated uniq_pep data frame. Next, extracts intensity columns indicated data type selected protein rows data frame. Converts missing values (zeros) NAs. Finally, function log transforms intensity values.","code":""},{"path":"https://caranathunge.github.io/promor/reference/create_df.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a data frame of protein intensities — create_df","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/create_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data frame of protein intensities — create_df","text":"","code":"# \\donttest{  ### Using a proteinGroups.txt file produced by MaxQuant as input. ## Generate a raw_df object with default settings. No technical replicates. raw_df <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg1.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\",   input_type = \"MaxQuant\" ) #> 0 empty row(s) removed. #> 0 empty column(s) removed. #> 80 protein(s) (rows) only identified by site removed. #> 65 reverse protein(s) (rows) removed. #> 42 protein potential contaminant(s) (rows) removed. #> 1923 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.  ## Data containing technical replicates raw_df <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg2.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed2.txt\",   input_type = \"MaxQuant\",   tech_reps = TRUE ) #> 0 empty row(s) removed. #> 1 empty column(s) removed. #> 12 reverse protein(s) (rows) removed. #> 29 protein contaminant(s) (rows) removed. #> 188 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.  ## Alter the number of unique peptides needed to retain a protein raw_df <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg1.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\",   input_type = \"MaxQuant\",   uniq_pep = 1 ) #> 0 empty row(s) removed. #> 0 empty column(s) removed. #> 80 protein(s) (rows) only identified by site removed. #> 65 reverse protein(s) (rows) removed. #> 42 protein potential contaminant(s) (rows) removed. #> 961 protein(s) identified by 1 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.  ## Use \"iBAQ\" values instead of \"LFQ\" values raw_df <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg1.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\",   input_type = \"MaxQuant\",   data_type = \"iBAQ\" ) #> 0 empty row(s) removed. #> 0 empty column(s) removed. #> 80 protein(s) (rows) only identified by site removed. #> 65 reverse protein(s) (rows) removed. #> 42 protein potential contaminant(s) (rows) removed. #> 1923 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.  ### Using a universal standard input file instead of MaxQuant output. raw_df <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/st.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\",   input_type = \"standard\" ) #> 0 empty row(s) removed. #> 0 empty column(s) removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed. # }"},{"path":"https://caranathunge.github.io/promor/reference/ecoli_fit_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Cox et al 2014 LFQ data (fit object) — ecoli_fit_df","title":"Cox et al 2014 LFQ data (fit object) — ecoli_fit_df","text":"object class \"MArrayLM\" running find_dep ecoli_norm_df","code":""},{"path":"https://caranathunge.github.io/promor/reference/ecoli_fit_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cox et al 2014 LFQ data (fit object) — ecoli_fit_df","text":"","code":"data(ecoli_fit_df)"},{"path":"https://caranathunge.github.io/promor/reference/ecoli_fit_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cox et al 2014 LFQ data (fit object) — ecoli_fit_df","text":"object class \"MArrayLM\"","code":""},{"path":"https://caranathunge.github.io/promor/reference/ecoli_fit_df.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cox et al 2014 LFQ data (fit object) — ecoli_fit_df","text":"https://europepmc.org/article/MED/24942700#id609082","code":""},{"path":"https://caranathunge.github.io/promor/reference/ecoli_norm_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Cox et al 2014 LFQ data (normalized) — ecoli_norm_df","title":"Cox et al 2014 LFQ data (normalized) — ecoli_norm_df","text":"dataframe containing normalized LFQ protein intensity data 4360 proteins 6 samples","code":""},{"path":"https://caranathunge.github.io/promor/reference/ecoli_norm_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cox et al 2014 LFQ data (normalized) — ecoli_norm_df","text":"","code":"data(ecoli_norm_df)"},{"path":"https://caranathunge.github.io/promor/reference/ecoli_norm_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cox et al 2014 LFQ data (normalized) — ecoli_norm_df","text":"data frame 4360 rows (proteins) 6 columns (samples)","code":""},{"path":"https://caranathunge.github.io/promor/reference/ecoli_norm_df.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cox et al 2014 LFQ data (normalized) — ecoli_norm_df","text":"https://europepmc.org/article/MED/24942700#id609082","code":""},{"path":"https://caranathunge.github.io/promor/reference/feature_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize feature (protein) variation among conditions — feature_plot","title":"Visualize feature (protein) variation among conditions — feature_plot","text":"function visualizes protein intensity differences among conditions (classes) using box plots density distribution plots.","code":""},{"path":"https://caranathunge.github.io/promor/reference/feature_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize feature (protein) variation among conditions — feature_plot","text":"","code":"feature_plot(   model_df,   type = \"box\",   text_size = 10,   palette = \"viridis\",   n_row,   n_col,   save = FALSE,   file_path = NULL,   file_name = \"Feature_plot\",   file_type = \"pdf\",   dpi = 80,   plot_width = 7,   plot_height = 7 )"},{"path":"https://caranathunge.github.io/promor/reference/feature_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize feature (protein) variation among conditions — feature_plot","text":"model_df model_df object performing pre_process. type Type plot generate. Choices \"box\" \"density.\" Default \"box.\" text_size Text size plot labels, axis labels etc. Default 10. palette Viridis color palette option plots. Default \"viridis\". See viridis available options. n_row Number rows print plots. n_col Number columns print plots. save Logical. TRUE saves copy plot directory provided file_path. file_path string containing directory path save file. file_name File name save plot. Default \"Feature_plot.\" file_type File type save plot. Default \"pdf\". dpi Plot resolution. Default 80. plot_width Width plot. Default 7. plot_height Height plot. Default 7.","code":""},{"path":"https://caranathunge.github.io/promor/reference/feature_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize feature (protein) variation among conditions — feature_plot","text":"ggplot2 object","code":""},{"path":"https://caranathunge.github.io/promor/reference/feature_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize feature (protein) variation among conditions — feature_plot","text":"function visualizes condition-wise differences protein intensity using boxplots /density plots.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/feature_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualize feature (protein) variation among conditions — feature_plot","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/feature_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize feature (protein) variation among conditions — feature_plot","text":"","code":"## Create a model_df object with default settings. covid_model_df <- pre_process(covid_fit_df, covid_norm_df) #> Total number of differentially expressed proteins (8) is less than n_top. #> None of the proteins show high pair-wise correlation. #>  #> No highly correlated proteins to be removed.  ## Feature variation - box plots feature_plot(covid_model_df, type = \"box\", n_row = 4, n_col = 2) #> Using condition as id variables   ## Density plots feature_plot(covid_model_df, type = \"density\") #> Using condition as id variables   ## Change color palette feature_plot(covid_model_df, type = \"density\", n_row = 4, n_col = 2, palette = \"rocket\") #> Using condition as id variables"},{"path":"https://caranathunge.github.io/promor/reference/filterbygroup_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter proteins by group level missing data — filterbygroup_na","title":"Filter proteins by group level missing data — filterbygroup_na","text":"function filters proteins based missing data group level.","code":""},{"path":"https://caranathunge.github.io/promor/reference/filterbygroup_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter proteins by group level missing data — filterbygroup_na","text":"","code":"filterbygroup_na(raw_df, set_na = 0.34, filter_condition = \"either\")"},{"path":"https://caranathunge.github.io/promor/reference/filterbygroup_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter proteins by group level missing data — filterbygroup_na","text":"raw_df raw_df object (output create_df) set_na proportion missing data allowed. Default 0.34 (one third samples group). filter_condition set \"\", proteins exceed missing value proportion threshold set set_na group removed (lenient). set \"either\"(default), proteins exceed missing value proportion threshold set set_na least one group removed (stringent).","code":""},{"path":"https://caranathunge.github.io/promor/reference/filterbygroup_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter proteins by group level missing data — filterbygroup_na","text":"raw_df object.","code":""},{"path":"https://caranathunge.github.io/promor/reference/filterbygroup_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter proteins by group level missing data — filterbygroup_na","text":"filter_condition = \"\", removes proteins (rows) data frame proportion NAs group exceeds threshold indicated set_na (default 0.34). option lenient comparison filter_condition = \"either\", proteins exceeds missing data threshold either group gets removed data frame.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/filterbygroup_na.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter proteins by group level missing data — filterbygroup_na","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/filterbygroup_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter proteins by group level missing data — filterbygroup_na","text":"","code":"# \\donttest{ # Generate a raw_df object with default settings. No technical replicates. raw_df <- create_df( prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg1.txt\", exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\" ) #> 0 empty row(s) removed. #> 0 empty column(s) removed. #> 80 protein(s) (rows) only identified by site removed. #> 65 reverse protein(s) (rows) removed. #> 42 protein potential contaminant(s) (rows) removed. #> 1923 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.  ## Remove proteins that exceed 34% NAs in either group (default) rawdf_filt1 <- filterbygroup_na(raw_df) #> 224 proteins with higher than 34% NAs in at least one group removed.  ## Remove proteins that exceed 34% NAs in each group rawdf_filt2 <- filterbygroup_na(raw_df, filter_condition = \"each\") #> 65 proteins with higher than 34% NAs in each group removed.  ## Proportion of samples with NAs allowed in each group = 0.5 rawdf_filt3 <- filterbygroup_na(raw_df, set_na = 0.5, filter_condition = \"each\") #> 65 proteins with higher than 50% NAs in each group removed.  # }"},{"path":"https://caranathunge.github.io/promor/reference/find_dep.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify differentially expressed proteins between groups — find_dep","title":"Identify differentially expressed proteins between groups — find_dep","text":"function performs differential expression analysis protein intensity data limma.","code":""},{"path":"https://caranathunge.github.io/promor/reference/find_dep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify differentially expressed proteins between groups — find_dep","text":"","code":"find_dep(   df,   save_output = FALSE,   save_tophits = FALSE,   file_path = NULL,   adj_method = \"BH\",   cutoff = 0.05,   lfc = 1,   n_top = 20 )"},{"path":"https://caranathunge.github.io/promor/reference/find_dep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify differentially expressed proteins between groups — find_dep","text":"df norm_df object imp_df object. save_output Logical. TRUE saves results differential expression analysis text file labeled \"limma_output.txt\" directory specified file_path. save_tophits Logical. TRUE saves n_top number top hits differential expression analysis text file labeled \"TopHits.txt\" directory specified file_path. file_path string containing directory path save file. adj_method Method used adjusting p-values multiple testing. Default \"BH\" \"Benjamini-Hochberg\" method. cutoff Cutoff value p-values adjusted p-values. Default 0.05. lfc Minimum absolute log2-fold change use threshold differential expression. n_top number top differentially expressed proteins save \"TopHits.txt\" file. Default 20.","code":""},{"path":"https://caranathunge.github.io/promor/reference/find_dep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify differentially expressed proteins between groups — find_dep","text":"fit_df object, similar limma fit object.","code":""},{"path":"https://caranathunge.github.io/promor/reference/find_dep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify differentially expressed proteins between groups — find_dep","text":"save_output saves complete results table differential expression analysis. save_tophits first subsets results absolute log fold change 1, performs multiple correction method specified adj_method outputs top n_top results based lowest p-value adjusted p-value. number hits absolute log fold change 1 less n_top, find_dep prints log-fold change > 1 \"TopHits.txt\". file_path specified, text files saved temporary directory.","code":""},{"path":"https://caranathunge.github.io/promor/reference/find_dep.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Identify differentially expressed proteins between groups — find_dep","text":"Ritchie, Matthew E., et al. \"limma powers differential expression analyses RNA-sequencing microarray studies.\" Nucleic acids research 43.7 (2015): e47-e47.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/find_dep.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify differentially expressed proteins between groups — find_dep","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/find_dep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify differentially expressed proteins between groups — find_dep","text":"","code":"## Perform differential expression analysis using default settings fit_df1 <- find_dep(ecoli_norm_df) #> Warning: 3 very small variances detected, have been offset away from zero #> 1186 siginificantly differentially expressed proteins found.  ## Change p-value and adjusted p-value cutoff fit_df2 <- find_dep(ecoli_norm_df, cutoff = 0.1) #> Warning: 3 very small variances detected, have been offset away from zero #> 1227 siginificantly differentially expressed proteins found."},{"path":"https://caranathunge.github.io/promor/reference/heatmap_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of differentially expressed proteins — heatmap_de","title":"Heatmap of differentially expressed proteins — heatmap_de","text":"function generates heatmap visualize differentially expressed proteins groups","code":""},{"path":"https://caranathunge.github.io/promor/reference/heatmap_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of differentially expressed proteins — heatmap_de","text":"","code":"heatmap_de(   fit_df,   df,   adj_method = \"BH\",   cutoff = 0.05,   lfc = 1,   sig = \"adjP\",   n_top = 20,   palette = \"viridis\",   text_size = 10,   save = FALSE,   file_path = NULL,   file_name = \"HeatmapDE\",   file_type = \"pdf\",   dpi = 80,   plot_height = 7,   plot_width = 7 )"},{"path":"https://caranathunge.github.io/promor/reference/heatmap_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of differentially expressed proteins — heatmap_de","text":"fit_df fit_df object performing find_dep. df norm_df object imp_df object fit_df object obtained. adj_method Method used adjusting p-values multiple testing. Default \"BH\". cutoff Cutoff value p-values adjusted p-values. Default 0.05. lfc Minimum absolute log2-fold change use threshold differential expression. Default 1. sig Criteria denote significance. Choices \"adjP\" (default) adjusted p-value \"P\" p-value. n_top Number top hits include heat map. palette Viridis color palette option plots. Default \"viridis\". See viridis available options. text_size Text size axis text, labels etc. save Logical. TRUE saves copy plot directory provided file_path. file_path string containing directory path save file. file_name File name save plot. Default \"HeatmapDE.\" file_type File type save plot. Default \"pdf\". dpi Plot resolution. Default 80. plot_height Height plot. Default 7. plot_width Width plot. Default 7.","code":""},{"path":"https://caranathunge.github.io/promor/reference/heatmap_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap of differentially expressed proteins — heatmap_de","text":"ggplot2 plot object.","code":""},{"path":"https://caranathunge.github.io/promor/reference/heatmap_de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Heatmap of differentially expressed proteins — heatmap_de","text":"default tiles heatmap reordered intensity values along axes (x axis = samples, y axis = proteins).","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/heatmap_de.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Heatmap of differentially expressed proteins — heatmap_de","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/heatmap_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap of differentially expressed proteins — heatmap_de","text":"","code":"## Build a heatmap of differentially expressed proteins using the provided ## example fit_df and norm_df data objects heatmap_de(covid_fit_df, covid_norm_df)   ## Create a heatmap with P-value of 0.05 and log fold change of 1 as ## significance criteria. heatmap_de(covid_fit_df, covid_norm_df, cutoff = 0.05, sig = \"P\")   ## Visualize the top 30 differentially expressed proteins in the heatmap and ## change the color palette heatmap_de(covid_fit_df, covid_norm_df,   cutoff = 0.05, sig = \"P\", n_top = 30,   palette = \"magma\" )"},{"path":"https://caranathunge.github.io/promor/reference/heatmap_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize missing data — heatmap_na","title":"Visualize missing data — heatmap_na","text":"function visualizes patterns missing value occurrence using heatmap.","code":""},{"path":"https://caranathunge.github.io/promor/reference/heatmap_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize missing data — heatmap_na","text":"","code":"heatmap_na(   raw_df,   protein_range,   sample_range,   reorder_x = FALSE,   reorder_y = FALSE,   x_fun = mean,   y_fun = mean,   palette = \"viridis\",   label_proteins = FALSE,   text_size = 10,   save = FALSE,   file_type = \"pdf\",   file_path = NULL,   file_name = \"Missing_data_heatmap\",   plot_width = 15,   plot_height = 15,   dpi = 80 )"},{"path":"https://caranathunge.github.io/promor/reference/heatmap_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize missing data — heatmap_na","text":"raw_df raw_df object (output create_df). protein_range range subset proteins (rows) plot. provided, proteins (rows) data frame used. sample_range range samples plot. provided, samples (columns) data frame used. reorder_x Logical. TRUE samples x axis reordered using function given x_fun. Default FALSE. reorder_y Logical. TRUE proteins y axis reordered using function given y_fun. Default FALSE. x_fun Function reorder samples along x axis. Possible options mean sum. Default mean. y_fun Function reorder proteins along y axis. Possible options mean sum. Default mean. palette Viridis color palette option plots. Default \"viridis\". See viridis available options. label_proteins TRUE proteins y axis labeled Majority Protein IDs. Default FALSE. text_size Text size axis labels. Default 10. save Logical. TRUE saves copy plot directory provided file_path. file_type File type save heatmap. Default \"pdf\". file_path string containing directory path save file. file_name File name save heatmap. Default \"Missing_data_heatmap\". plot_width Width plot. Default 15. plot_height Height plot. Default 15. dpi Plot resolution. Default 80.","code":""},{"path":"https://caranathunge.github.io/promor/reference/heatmap_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize missing data — heatmap_na","text":"ggplot2 plot object.","code":""},{"path":"https://caranathunge.github.io/promor/reference/heatmap_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize missing data — heatmap_na","text":"function visualizes patterns missing value occurrence using heatmap. user can choose reorder axes using available functions (x_fun, y_fun) better understand underlying cause missing data.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/heatmap_na.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualize missing data — heatmap_na","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/heatmap_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize missing data — heatmap_na","text":"","code":"## Generate a raw_df object with default settings. No technical replicates. raw_df <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg1.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\" ) #> 0 empty row(s) removed. #> 0 empty column(s) removed. #> 80 protein(s) (rows) only identified by site removed. #> 65 reverse protein(s) (rows) removed. #> 42 protein potential contaminant(s) (rows) removed. #> 1923 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.  ## Missing data heatmap with default settings. heatmap_na(raw_df)   ## Missing data heatmap with x and y axes reordered by the mean (default) of ## protein intensity. heatmap_na(raw_df,   reorder_x = TRUE, reorder_y = TRUE )   ## Missing data heatmap with x and y axes reordered by the sum of ## protein intensity. heatmap_na(raw_df,   reorder_x = TRUE, reorder_y = TRUE, x_fun = sum,   y_fun = sum )   ## Missing data heatmap for a subset of the proteins with x and y axes ## reordered by the mean (default) of protein intensity and the y axis ## labeled with protein IDs. heatmap_na(raw_df,   protein_range = 1:30,   reorder_x = TRUE, reorder_y = TRUE,   label_proteins = TRUE )"},{"path":"https://caranathunge.github.io/promor/reference/impute_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute missing values — impute_na","title":"Impute missing values — impute_na","text":"function imputes missing values using user-specified imputation method.","code":""},{"path":"https://caranathunge.github.io/promor/reference/impute_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute missing values — impute_na","text":"","code":"impute_na(   df,   method = \"minProb\",   tune_sigma = 1,   q = 0.01,   maxiter = 10,   ntree = 20,   n_pcs = 2,   seed = NULL )"},{"path":"https://caranathunge.github.io/promor/reference/impute_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute missing values — impute_na","text":"df raw_df object (output create_df) containing missing values norm_df object performing normalization. method Imputation method use. Default \"minProb\". Available methods: \"minDet\", \"RF\", \"kNN\", \"SVD\". tune_sigma scalar used \"minProb\" method controlling standard deviation Gaussian distribution random values drawn imputation. Default 1. q scalar used \"minProb\" \"minDet\" methods obtain low intensity value imputation. q set low value. Default 0.01. maxiter Maximum number iterations performed using \"RF\" method. Default 10. ntree Number trees grow forest using \"RF\" method. Default 20. n_pcs Number principal components calculate using \"SVD\" method. Default 2. seed Numerical. Random number seed. Default NULL","code":""},{"path":"https://caranathunge.github.io/promor/reference/impute_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute missing values — impute_na","text":"imp_df object, data frame protein intensities missing values.","code":""},{"path":"https://caranathunge.github.io/promor/reference/impute_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute missing values — impute_na","text":"impute_na function imputes missing values using user-specified imputation method available options, minProb, minDet, kNN, RF, SVD. Note: imputation methods may require data normalized prior imputation. Make sure fix random number seed seed reproducibility .","code":""},{"path":"https://caranathunge.github.io/promor/reference/impute_na.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Impute missing values — impute_na","text":"Lazar, Cosmin, et al. \"Accounting multiple natures missing values label-free quantitative proteomics data sets compare imputation strategies.\" Journal proteome research 15.4 (2016): 1116-1125.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/impute_na.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Impute missing values — impute_na","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/impute_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute missing values — impute_na","text":"","code":"## Generate a raw_df object with default settings. No technical replicates. raw_df <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg1.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\" ) #> 0 empty row(s) removed. #> 0 empty column(s) removed. #> 80 protein(s) (rows) only identified by site removed. #> 65 reverse protein(s) (rows) removed. #> 42 protein potential contaminant(s) (rows) removed. #> 1923 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.  ## Impute missing values in the data frame using the default minProb ## method. imp_df1 <- impute_na(raw_df, seed = 3312)  # \\donttest{ ## Impute using the RF method with the number of iterations set at 5 ## and number of trees set at 100. imp_df2 <- impute_na(raw_df,   method = \"RF\",   maxiter = 5, ntree = 100,   seed = 3312 ) #>   missForest iteration 1 in progress...done! #>     estimated error(s): 0.136547  #>     difference(s): 0.001001133  #>     time: 26.054 seconds #>  #>   missForest iteration 2 in progress...done! #>     estimated error(s): 0.1323305  #>     difference(s): 2.465832e-06  #>     time: 24.355 seconds #>  #>   missForest iteration 3 in progress...done! #>     estimated error(s): 0.1320162  #>     difference(s): 9.145074e-07  #>     time: 22.633 seconds #>  #>   missForest iteration 4 in progress...done! #>     estimated error(s): 0.1319143  #>     difference(s): 7.914833e-07  #>     time: 24.547 seconds #>  #>   missForest iteration 5 in progress...done! #>     estimated error(s): 0.1322113  #>     difference(s): 6.409383e-07  #>     time: 23.66 seconds #>    ## Using the kNN method. imp_df3 <- impute_na(raw_df, method = \"kNN\", seed = 3312) # }   ## Using the SVD method with n_pcs set to 3. imp_df4 <- impute_na(raw_df, method = \"SVD\", n_pcs = 3, seed = 3312) #> change in estimate:  0.007642841   ## Using the minDet method with q set at 0.001. imp_df5 <- impute_na(raw_df, method = \"minDet\", q = 0.001, seed = 3312)  ## Impute a normalized data set using the kNN method imp_df6 <- impute_na(ecoli_norm_df, method = \"kNN\") #> Warning: Nothing to impute, because no NA are present (also after using makeNA)"},{"path":"https://caranathunge.github.io/promor/reference/impute_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the impact of imputation — impute_plot","title":"Visualize the impact of imputation — impute_plot","text":"function generates density plots visualize impact missing data imputation data.","code":""},{"path":"https://caranathunge.github.io/promor/reference/impute_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the impact of imputation — impute_plot","text":"","code":"impute_plot(   original,   imputed,   global = TRUE,   text_size = 10,   palette = \"viridis\",   n_row,   n_col,   save = FALSE,   file_path = NULL,   file_name = \"Impute_plot\",   file_type = \"pdf\",   plot_width = 7,   plot_height = 7,   dpi = 80 )"},{"path":"https://caranathunge.github.io/promor/reference/impute_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the impact of imputation — impute_plot","text":"original raw_df object (output create_df) containing missing values norm_df object containing normalized protein intensity data. imputed imp_df object obtained running impute_na data frame provided original. global Logical. TRUE (default), global density plot produced. FALSE, sample-wise density plots produced. text_size Text size plot labels, axis labels etc. Default 10. palette Viridis color palette option plots. Default \"viridis\". See viridis available options. n_row Used global = FALSE indicate number rows print plots. n_col Used global = FALSE indicate number columns print plots. save Logical. TRUE saves copy plot directory provided file_path. file_path string containing directory path save file. file_name File name save density plot/s. Default \"Impute_plot.\" file_type File type save density plot/s. Default \"pdf\". plot_width Width plot. Default 7. plot_height Height plot. Default 7. dpi Plot resolution. Default 80.","code":""},{"path":"https://caranathunge.github.io/promor/reference/impute_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the impact of imputation — impute_plot","text":"ggplot2 plot object.","code":""},{"path":"https://caranathunge.github.io/promor/reference/impute_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize the impact of imputation — impute_plot","text":"Note, sample-wise option selected (global = FALSE), n_col n_row can used specify number columns rows print plots. choose specify n_row n_col, make sure n_row * n_col matches total number samples data frame.","code":""},{"path":"https://caranathunge.github.io/promor/reference/impute_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualize the impact of imputation — impute_plot","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/impute_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the impact of imputation — impute_plot","text":"","code":"## Generate a raw_df object with default settings. No technical replicates. raw_df <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg1.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\" ) #> 0 empty row(s) removed. #> 0 empty column(s) removed. #> 80 protein(s) (rows) only identified by site removed. #> 65 reverse protein(s) (rows) removed. #> 42 protein potential contaminant(s) (rows) removed. #> 1923 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.  ## Impute missing values in the data frame using the default minProb ## method. imp_df <- impute_na(raw_df)  ## Visualize the impact of missing data imputation with a global density ## plot. impute_plot(original = raw_df, imputed = imp_df) #> Warning: Removed 1084 rows containing non-finite values (`stat_density()`).   ## Make sample-wise density plots impute_plot(raw_df, imp_df, global = FALSE) #> Warning: Removed 1084 rows containing non-finite values (`stat_density()`).   ## Print plots in user-specified numbers of rows and columns impute_plot(raw_df, imp_df, global = FALSE, n_col = 2, n_row = 3) #> Warning: Removed 1084 rows containing non-finite values (`stat_density()`)."},{"path":"https://caranathunge.github.io/promor/reference/norm_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the effect of normalization — norm_plot","title":"Visualize the effect of normalization — norm_plot","text":"function visualizes impact normalization data","code":""},{"path":"https://caranathunge.github.io/promor/reference/norm_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the effect of normalization — norm_plot","text":"","code":"norm_plot(   original,   normalized,   type = \"box\",   text_size = 10,   palette = \"viridis\",   save = FALSE,   file_path = NULL,   file_name = \"Norm_plot\",   file_type = \"pdf\",   dpi = 80,   plot_width = 10,   plot_height = 7 )"},{"path":"https://caranathunge.github.io/promor/reference/norm_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the effect of normalization — norm_plot","text":"original raw_df object (output create_df) containing missing values, imp_df object imputing missing values impute_na. normalized norm_df object normalizing data frame provided original using normalize_data. type Type plot generate. Choices \"box\" \"density.\" Default \"box.\" text_size Text size plot labels, axis labels etc. Default 10. palette Viridis color palette option plots. Default \"viridis\". See viridis available options. save Logical. TRUE saves copy plot directory provided file_path. file_path string containing directory path save file. file_name File name save plot. Default \"Norm_plot.\" file_type File type save plot. Default \"pdf\". dpi Plot resolution. Default 80. plot_width Width plot. Default 10. plot_height Height plot. Default 7.","code":""},{"path":"https://caranathunge.github.io/promor/reference/norm_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the effect of normalization — norm_plot","text":"ggplot2 plot object.","code":""},{"path":"https://caranathunge.github.io/promor/reference/norm_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize the effect of normalization — norm_plot","text":"Given two data frames, one data prior normalization (original), , normalization (normalized), norm_plot generates side--side plots visualize effect normalization protein intensity data.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/norm_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualize the effect of normalization — norm_plot","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/norm_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the effect of normalization — norm_plot","text":"","code":"# \\donttest{ ## Generate a raw_df object with default settings. No technical replicates. raw_df <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg1.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\" ) #> 0 empty row(s) removed. #> 0 empty column(s) removed. #> 80 protein(s) (rows) only identified by site removed. #> 65 reverse protein(s) (rows) removed. #> 42 protein potential contaminant(s) (rows) removed. #> 1923 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.  ## Impute missing values in the data frame using the default minProb ## method. imp_df <- impute_na(raw_df)  ## Normalize the imp_df object using the default quantile method norm_df <- normalize_data(imp_df)  ## Visualize normalization using box plots norm_plot(original = imp_df, normalized = norm_df) #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA   ## Visualize normalization using density plots norm_plot(imp_df, norm_df, type = \"density\")  # }"},{"path":"https://caranathunge.github.io/promor/reference/normalize_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize intensity data — normalize_data","title":"Normalize intensity data — normalize_data","text":"function normalizes data using user-specified normalization method.","code":""},{"path":"https://caranathunge.github.io/promor/reference/normalize_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize intensity data — normalize_data","text":"","code":"normalize_data(df, method = \"quantile\")"},{"path":"https://caranathunge.github.io/promor/reference/normalize_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize intensity data — normalize_data","text":"df imp_df object missing values imputed using impute_na raw_df object containing missing values. method Name normalization method use. Choices \"none\", \"scale\", \"quantile\" \"cyclicloess.\" Default \"quantile.\"","code":""},{"path":"https://caranathunge.github.io/promor/reference/normalize_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize intensity data — normalize_data","text":"norm_df object, data frame normalized protein intensities.","code":""},{"path":"https://caranathunge.github.io/promor/reference/normalize_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalize intensity data — normalize_data","text":"function normalizes intensity values achieve consistency among samples. assumes intensities data frame log-transformed, therefore, important make sure create_df run log_tr = TRUE(default) creating raw_df object.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/normalize_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Normalize intensity data — normalize_data","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/normalize_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize intensity data — normalize_data","text":"","code":"## Generate a raw_df object with default settings. No technical replicates. raw_df <- create_df(   prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg1.txt\",   exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\" ) #> 0 empty row(s) removed. #> 0 empty column(s) removed. #> 80 protein(s) (rows) only identified by site removed. #> 65 reverse protein(s) (rows) removed. #> 42 protein potential contaminant(s) (rows) removed. #> 1923 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.  ## Impute missing values in the data frame using the default minProb ## method prioir to normalization. imp_df <- impute_na(raw_df)  ## Normalize the imp_df object using the default quantile method norm_df1 <- normalize_data(imp_df)  ## Use the cyclicloess method norm_df2 <- normalize_data(imp_df, method = \"cyclicloess\")  ## Normalize data in the raw_df object prior to imputation. norm_df3 <- normalize_data(raw_df)"},{"path":"https://caranathunge.github.io/promor/reference/onegroup_only.html","id":null,"dir":"Reference","previous_headings":"","what":"Proteins that are only expressed in a given group — onegroup_only","title":"Proteins that are only expressed in a given group — onegroup_only","text":"function outputs list proteins expressed (present) one user-specified group expressed (completely absent) another user-specified group.","code":""},{"path":"https://caranathunge.github.io/promor/reference/onegroup_only.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proteins that are only expressed in a given group — onegroup_only","text":"","code":"onegroup_only(   raw_df,   abs_group,   pres_group,   set_na = 0.34,   save = FALSE,   file_path = NULL )"},{"path":"https://caranathunge.github.io/promor/reference/onegroup_only.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proteins that are only expressed in a given group — onegroup_only","text":"raw_df raw_df object (output create_df) abs_group Name group proteins expressed. pres_group Name group proteins expressed. set_na percentage missing data allowed pres_group. Default 0.34 (one third samples group). save Logical. TRUE (default), saves output text file named \"Group_pres_group_only.txt.\" file_path string containing directory path save file.","code":""},{"path":"https://caranathunge.github.io/promor/reference/onegroup_only.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proteins that are only expressed in a given group — onegroup_only","text":"list majority protein IDs.","code":""},{"path":"https://caranathunge.github.io/promor/reference/onegroup_only.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Proteins that are only expressed in a given group — onegroup_only","text":"Note: onegroup_only function assumes column names raw_df object provided df follow \"Group_UniqueSampleID\" notation. (Use head(raw_df) check structure raw_df object.) text file containing majority protein IDs saved temporary directory file_path specified.","code":""},{"path":"https://caranathunge.github.io/promor/reference/onegroup_only.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Proteins that are only expressed in a given group — onegroup_only","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/onegroup_only.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proteins that are only expressed in a given group — onegroup_only","text":"","code":"# Generate a raw_df object with default settings. No technical replicates. raw_df <- create_df( prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg1.txt\", exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed1.txt\" ) #> 0 empty row(s) removed. #> 0 empty column(s) removed. #> 80 protein(s) (rows) only identified by site removed. #> 65 reverse protein(s) (rows) removed. #> 42 protein potential contaminant(s) (rows) removed. #> 1923 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed.  ## Find the proteins only expressed in group L, but absent in group H. onegroup_only(raw_df, abs_group = \"H\", pres_group = \"L\") #>  [1] \"H7C5A7;E9PJN0;A6NDT2;O14734;H0Y698;Q9BR14;E9PMC4;G5E995;E9PIS4\"                                                                                                 #>  [2] \"A8MXV4\"                                                                                                                                                         #>  [3] \"A8MYT4;Q8NEB9\"                                                                                                                                                  #>  [4] \"B4DXC8;Q9Y5B8-2;Q9Y5B8;E9PNU1\"                                                                                                                                  #>  [5] \"B7Z468;P20810-3;E7ES10;P20810-4;E9PCH5;G5E946;E7EVY3;B7Z574;P20810-2;P20810;G5E9D3;P20810-5;E7ESM9;P20810-7;P20810-6;E7EQ12;E7EQA0;H0Y7F0;H0YD33;H0Y9H6;E9PDE4\" #>  [6] \"C9J3L8;C9J5W0;P43307;E9PAL7;C9IZQ1;P43307-2;F5H5Y2\"                                                                                                             #>  [7] \"Q9HAW4-2;E7ESG2;Q9HAW4-3;Q9HAW4\"                                                                                                                                #>  [8] \"G3V158;Q9Y315;E9PMH9;E9PML7;E9PPM8\"                                                                                                                             #>  [9] \"H3BRK5;H3BMW1;H3BNF0;Q9Y5Y2;H3BNS4\"                                                                                                                             #> [10] \"P53007\"                                                                                                                                                         #> [11] \"P61764;F5H5Q4;P61764-2;B7Z1V5\"                                                                                                                                  #> [12] \"P81605;P81605-2\"                                                                                                                                                #> [13] \"Q13228-2;Q13228;B4E1F3\"                                                                                                                                         #> [14] \"Q5SW02;Q5SVZ6\"                                                                                                                                                  #> [15] \"Q6Q0C0-2;Q6Q0C0\"                                                                                                                                                #> [16] \"Q6UW63\"                                                                                                                                                         #> [17] \"Q8IYI6\"                                                                                                                                                         #> [18] \"Q92572;F5H459\"                                                                                                                                                  #> [19] \"Q9C0B7\""},{"path":"https://caranathunge.github.io/promor/reference/performance_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Model performance plot — performance_plot","title":"Model performance plot — performance_plot","text":"function generates plots visualize model performance","code":""},{"path":"https://caranathunge.github.io/promor/reference/performance_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model performance plot — performance_plot","text":"","code":"performance_plot(   model_list,   type = \"box\",   text_size = 10,   palette = \"viridis\",   save = FALSE,   file_path = NULL,   file_name = \"Performance_plot\",   file_type = \"pdf\",   plot_width = 7,   plot_height = 7,   dpi = 80 )"},{"path":"https://caranathunge.github.io/promor/reference/performance_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model performance plot — performance_plot","text":"model_list model_list object performing train_models. type Type plot generate. Choices \"box\" \"dot.\" Default \"box.\" boxplots. text_size Text size plot labels, axis labels etc. Default 10. palette Viridis color palette option plots. Default \"viridis\". See viridis available options. save Logical. TRUE saves copy plot directory provided file_path. file_path string containing directory path save file. file_name File name save plot. Default \"Performance_plot.\" file_type File type save plot. Default \"pdf\". plot_width Width plot. Default 7. plot_height Height plot. Default 7. dpi Plot resolution. Default 80.","code":""},{"path":"https://caranathunge.github.io/promor/reference/performance_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model performance plot — performance_plot","text":"ggplot2 object.","code":""},{"path":"https://caranathunge.github.io/promor/reference/performance_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model performance plot — performance_plot","text":"default metrics used classification based models \"Accuracy\" \"Kappa.\" metric types can changed providing additional arguments train_models function. See train trainControl information.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/performance_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model performance plot — performance_plot","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/performance_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model performance plot — performance_plot","text":"","code":"# \\donttest{  ## Create a model_df object covid_model_df <- pre_process(covid_fit_df, covid_norm_df) #> Total number of differentially expressed proteins (8) is less than n_top. #> None of the proteins show high pair-wise correlation. #>  #> No highly correlated proteins to be removed.  ## Split the data frame into training and test data sets covid_split_df <- split_data(covid_model_df)  ## Fit models based on the default list of machine learning (ML) algorithms covid_model_list <- train_models(covid_split_df) #>  #> Running svmRadial... #> Loading required package: ggplot2 #> Loading required package: lattice #>  #> Running rf... #>  #> Running glm... #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #>  #> Running xgbLinear... #> Done!  ## Generate box plots to visualize performance of different ML algorithms performance_plot(covid_model_list) #> Using Resample as id variables   ## Generate dot plots performance_plot(covid_model_list, type = \"dot\") #> Using Resample as id variables #> Warning: Removed 4 rows containing missing values (`geom_segment()`). #> Warning: Removed 4 rows containing missing values (`geom_segment()`).   ## Change color palette performance_plot(covid_model_list, type = \"dot\", palette = \"inferno\") #> Using Resample as id variables #> Warning: Removed 4 rows containing missing values (`geom_segment()`). #> Warning: Removed 4 rows containing missing values (`geom_segment()`).  # }"},{"path":"https://caranathunge.github.io/promor/reference/pre_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-process protein intensity data for modeling — pre_process","title":"Pre-process protein intensity data for modeling — pre_process","text":"function pre-processes protein intensity data top differentially expressed proteins identified find_dep modeling.","code":""},{"path":"https://caranathunge.github.io/promor/reference/pre_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-process protein intensity data for modeling — pre_process","text":"","code":"pre_process(   fit_df,   norm_df,   sig = \"adjP\",   sig_cutoff = 0.05,   fc = 1,   n_top = 20,   find_highcorr = TRUE,   corr_cutoff = 0.9,   save_corrmatrix = FALSE,   file_path = NULL,   rem_highcorr = TRUE )"},{"path":"https://caranathunge.github.io/promor/reference/pre_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-process protein intensity data for modeling — pre_process","text":"fit_df fit_df object performing find_dep. norm_df norm_df object fit_df object obtained. sig Criteria denote significance differential expression. Choices \"adjP\" (default) adjusted p-value \"P\" p-value. sig_cutoff Cutoff value p-values adjusted p-values differential expression. Default 0.05. fc Minimum absolute log-fold change use threshold differential expression. Default 1. n_top number top hits find_dep used modeling. Default 20. find_highcorr Logical. TRUE (default), finds highly correlated proteins. corr_cutoff numeric value specifying correlation cutoff. Default 0.90. save_corrmatrix Logical. TRUE, saves copy protein correlation matrix tab-delimited text file labeled \"Protein_correlation.txt\" directory specified file_path. file_path string containing directory path save file. rem_highcorr Logical. TRUE (default), removes highly correlated proteins (predictors features).","code":""},{"path":"https://caranathunge.github.io/promor/reference/pre_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre-process protein intensity data for modeling — pre_process","text":"model_df object, data frame protein intensities proteins indicated columns.","code":""},{"path":"https://caranathunge.github.io/promor/reference/pre_process.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pre-process protein intensity data for modeling — pre_process","text":"function creates data frame contains protein intensities user-specified number top differentially expressed proteins. Note: models benefit reducing correlation proteins (predictors features), therefore recommend removing proteins stage reduce pairwise-correlation. proteins meet significance threshold differential expression, may adjust sig, fc, /sig_cutoff accordingly obtain proteins modeling.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/pre_process.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pre-process protein intensity data for modeling — pre_process","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/pre_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-process protein intensity data for modeling — pre_process","text":"","code":"## Create a model_df object with default settings. covid_model_df1 <- pre_process(fit_df = covid_fit_df, norm_df = covid_norm_df) #> Total number of differentially expressed proteins (8) is less than n_top. #> None of the proteins show high pair-wise correlation. #>  #> No highly correlated proteins to be removed.  ## Change the correlation cutoff. covid_model_df2 <- pre_process(covid_fit_df, covid_norm_df, corr_cutoff = 0.95) #> Total number of differentially expressed proteins (8) is less than n_top. #> None of the proteins show high pair-wise correlation. #>  #> No highly correlated proteins to be removed.  ## Change the significance criteria to include more proteins covid_model_df3 <- pre_process(covid_fit_df, covid_norm_df, sig = \"P\") #> None of the proteins show high pair-wise correlation. #>  #> No highly correlated proteins to be removed.  ## Change the number of top differentially expressed proteins to include covid_model_df4 <- pre_process(covid_fit_df, covid_norm_df, sig = \"P\", n_top = 24) #> None of the proteins show high pair-wise correlation. #>  #> No highly correlated proteins to be removed."},{"path":"https://caranathunge.github.io/promor/reference/rem_feature.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove user-specified proteins (features) from a data frame — rem_feature","title":"Remove user-specified proteins (features) from a data frame — rem_feature","text":"function removes user-specified proteins model_df object","code":""},{"path":"https://caranathunge.github.io/promor/reference/rem_feature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove user-specified proteins (features) from a data frame — rem_feature","text":"","code":"rem_feature(model_df, rem_protein)"},{"path":"https://caranathunge.github.io/promor/reference/rem_feature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove user-specified proteins (features) from a data frame — rem_feature","text":"model_df model_df object. rem_protein Name protein remove.","code":""},{"path":"https://caranathunge.github.io/promor/reference/rem_feature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove user-specified proteins (features) from a data frame — rem_feature","text":"model_df object.","code":""},{"path":"https://caranathunge.github.io/promor/reference/rem_feature.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove user-specified proteins (features) from a data frame — rem_feature","text":"example, can choose remove protein model_df object protein show distinct patterns variation among conditions. protein may show mostly overlapping distributions feature plots. Another incidence removing protein low variable importance models built using train_models. can visualize variable importance using varimp_plot.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/rem_feature.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove user-specified proteins (features) from a data frame — rem_feature","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/rem_feature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove user-specified proteins (features) from a data frame — rem_feature","text":"","code":"covid_model_df <- pre_process(fit_df = covid_fit_df, norm_df = covid_norm_df) #> Total number of differentially expressed proteins (8) is less than n_top. #> None of the proteins show high pair-wise correlation. #>  #> No highly correlated proteins to be removed.  ## Remove sp|P22352|GPX3_HUMAN protein from the model_df object covid_model_df1 <- rem_feature(covid_model_df, rem_protein = \"sp|P22352|GPX3_HUMAN\") #> Protein sp|P22352|GPX3_HUMAN has been removed."},{"path":"https://caranathunge.github.io/promor/reference/rem_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove user-specified samples — rem_sample","title":"Remove user-specified samples — rem_sample","text":"function removes user-specified samples data frame.","code":""},{"path":"https://caranathunge.github.io/promor/reference/rem_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove user-specified samples — rem_sample","text":"","code":"rem_sample(raw_df, rem)"},{"path":"https://caranathunge.github.io/promor/reference/rem_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove user-specified samples — rem_sample","text":"raw_df raw_df object. rem Name sample remove.","code":""},{"path":"https://caranathunge.github.io/promor/reference/rem_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove user-specified samples — rem_sample","text":"raw_df object.","code":""},{"path":"https://caranathunge.github.io/promor/reference/rem_sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove user-specified samples — rem_sample","text":"technical replicates representing sample needs removed, provide \"Group_UniqueSampleID\" rem. specific technical replicate needs removed case shows weak correlation technical replicates example, can remove particular technical replicate providing \"Group_UniqueSampleID_TechnicalReplicate\" rem.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/rem_sample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove user-specified samples — rem_sample","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/rem_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove user-specified samples — rem_sample","text":"","code":"## Use a data set containing technical replicates to create a raw_df object raw_df <- create_df( prot_groups = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/pg2.txt\", exp_design = \"https://raw.githubusercontent.com/caranathunge/promor_example_data/main/ed2.txt\", tech_reps = TRUE ) #> 0 empty row(s) removed. #> 1 empty column(s) removed. #> 12 reverse protein(s) (rows) removed. #> 29 protein contaminant(s) (rows) removed. #> 188 protein(s) identified by 2 or fewer unique peptides removed. #> Zeros have been replaced with NAs. #> Data have been log-transformed. # Check the first few rows of the raw_df object head(raw_df) #>                WT_4_1   WT_4_2   WT_4_3   WT_5_1   WT_5_2   WT_5_3   WT_6_1 #> gi|118496616 28.29364 28.23027 28.21688 28.06928 28.30029 28.16715 28.32976 #> gi|118496617 29.61863 29.73206 29.72970 29.43474 29.69021 29.79974 29.88464 #> gi|118496621       NA 23.96754       NA       NA       NA       NA       NA #> gi|118496635 30.79452 30.80939 30.81917 30.59584 30.71367 30.74791 30.58924 #> gi|118496636 29.06789 29.18988 29.19237 28.99674 28.88547 28.99502 29.10345 #> gi|118496637 28.04062 27.74919 28.09763 27.91462 27.67364 27.69617 28.00544 #>                WT_6_2   WT_6_3   D8_1_1   D8_1_2   D8_1_3   D8_2_1   D8_2_2 #> gi|118496616 28.33360 28.30978 27.84458 28.18980 28.26794 28.22246 28.25953 #> gi|118496617 29.93382 29.96168 29.44843 29.89179 29.76792 29.85262 29.94182 #> gi|118496621       NA 24.31872       NA       NA       NA       NA       NA #> gi|118496635 30.73036 30.64727 30.62366 30.64702 30.71857 30.53594 30.52739 #> gi|118496636 29.11018 28.95471 29.14163 28.98191 29.07324 28.94067 28.90216 #> gi|118496637 27.96560 27.96664 27.70352 27.72715 27.70227 27.80839 27.56005 #>                D8_2_3   D8_3_1   D8_3_2   D8_3_3 #> gi|118496616 28.34363 28.04004 28.30795 28.28639 #> gi|118496617 29.99010 30.20560 30.09723 30.21824 #> gi|118496621       NA       NA       NA       NA #> gi|118496635 30.59290 30.66195 30.62793 30.60858 #> gi|118496636 28.85896 29.09419 28.89331 29.04336 #> gi|118496637 27.58992 27.63810 27.55866 27.46014  ## Remove all technical replicates of \"WT_4\" raw_df1 <- rem_sample(raw_df, \"WT_4\")  ## Remove only technical replicate number 2 of \"WT_4\" raw_df2 <- rem_sample(raw_df, \"WT_4_2\")"},{"path":"https://caranathunge.github.io/promor/reference/roc_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"ROC plot — roc_plot","title":"ROC plot — roc_plot","text":"function generates Receiver Operating Characteristic (ROC) curves evaluate models","code":""},{"path":"https://caranathunge.github.io/promor/reference/roc_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ROC plot — roc_plot","text":"","code":"roc_plot(   probability_list,   split_df,   ...,   multiple_plots = TRUE,   text_size = 10,   palette = \"viridis\",   save = FALSE,   file_path = NULL,   file_name = \"ROC_plot\",   file_type = \"pdf\",   plot_width = 7,   plot_height = 7,   dpi = 80 )"},{"path":"https://caranathunge.github.io/promor/reference/roc_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ROC plot — roc_plot","text":"probability_list probability_list object performing test_models type = \"prob\". split_df split_df object performing split_data ... Additional arguments passed roc. multiple_plots Logical. FALSE plots ROC curves representing algorithms included probability_list single plot. text_size Text size plot labels, axis labels etc. Default 10. palette Viridis color palette option plots. Default \"viridis\". See viridis available options. save Logical. TRUE saves copy plot directory provided file_path. file_path string containing directory path save file. file_name File name save plot. Default \"ROC_plot.\" file_type File type save plot. Default \"pdf\". plot_width Width plot. Default 7. plot_height Height plot. Default 7. dpi Plot resolution. Default 80.","code":""},{"path":"https://caranathunge.github.io/promor/reference/roc_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ROC plot — roc_plot","text":"ggplot2 object.","code":""},{"path":"https://caranathunge.github.io/promor/reference/roc_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ROC plot — roc_plot","text":"Next, relevant information extracted ROC object plot ROC curves.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/roc_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ROC plot — roc_plot","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/roc_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ROC plot — roc_plot","text":"","code":"# \\donttest{ ## Create a model_df object covid_model_df <- pre_process(covid_fit_df, covid_norm_df) #> Total number of differentially expressed proteins (8) is less than n_top. #> None of the proteins show high pair-wise correlation. #>  #> No highly correlated proteins to be removed.  ## Split the data frame into training and test data sets covid_split_df <- split_data(covid_model_df)  ## Fit models using the default list of machine learning (ML) algorithms covid_model_list <- train_models(covid_split_df) #>  #> Running svmRadial... #>  #> Running rf... #>  #> Running glm... #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #>  #> Running xgbLinear... #> Done!  # Test a list of models on a test data set and output class probabilities, covid_prob_list <- test_models(covid_model_list, covid_split_df, type = \"prob\") #>  #> Testing svmRadial... #>  #> Testing rf... #>  #> Testing glm... #>  #> Testing xgbLinear... #>  #> Done!  ## Plot ROC curves separately for each ML algorithm roc_plot(covid_prob_list, covid_split_df) #> Setting levels: control = Non.Severe, case = Severe #> Setting direction: controls > cases #> Setting levels: control = Non.Severe, case = Severe #> Setting direction: controls > cases #> Setting levels: control = Non.Severe, case = Severe #> Setting direction: controls < cases #> Setting levels: control = Non.Severe, case = Severe #> Setting direction: controls > cases #> Warning: number of columns of result is not a multiple of vector length (arg 3) #> Warning: number of columns of result is not a multiple of vector length (arg 3)   ## Plot all ROC curves in one plot roc_plot(covid_prob_list, covid_split_df, multiple_plots = FALSE) #> Setting levels: control = Non.Severe, case = Severe #> Setting direction: controls > cases #> Setting levels: control = Non.Severe, case = Severe #> Setting direction: controls > cases #> Setting levels: control = Non.Severe, case = Severe #> Setting direction: controls < cases #> Setting levels: control = Non.Severe, case = Severe #> Setting direction: controls > cases #> Warning: number of columns of result is not a multiple of vector length (arg 3) #> Warning: number of columns of result is not a multiple of vector length (arg 3)   ## Change color palette roc_plot(covid_prob_list, covid_split_df, palette = \"plasma\") #> Setting levels: control = Non.Severe, case = Severe #> Setting direction: controls > cases #> Setting levels: control = Non.Severe, case = Severe #> Setting direction: controls > cases #> Setting levels: control = Non.Severe, case = Severe #> Setting direction: controls < cases #> Setting levels: control = Non.Severe, case = Severe #> Setting direction: controls > cases #> Warning: number of columns of result is not a multiple of vector length (arg 3) #> Warning: number of columns of result is not a multiple of vector length (arg 3)  # }"},{"path":"https://caranathunge.github.io/promor/reference/split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split the data frame to create training and test data — split_data","title":"Split the data frame to create training and test data — split_data","text":"function can used create balanced splits protein intensity data model_df object create training test data","code":""},{"path":"https://caranathunge.github.io/promor/reference/split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split the data frame to create training and test data — split_data","text":"","code":"split_data(model_df, train_size = 0.8, seed = NULL)"},{"path":"https://caranathunge.github.io/promor/reference/split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split the data frame to create training and test data — split_data","text":"model_df model_df object performing pre_process. train_size size training data set proportion complete data set. Default 0.8. seed Numerical. Random number seed. Default NULL","code":""},{"path":"https://caranathunge.github.io/promor/reference/split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split the data frame to create training and test data — split_data","text":"list data frames.","code":""},{"path":"https://caranathunge.github.io/promor/reference/split_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split the data frame to create training and test data — split_data","text":"function splits model_df object training test data sets using random sampling preserving original class distribution data. Make sure fix random number seed seed reproducibility","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/split_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split the data frame to create training and test data — split_data","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split the data frame to create training and test data — split_data","text":"","code":"## Create a model_df object covid_model_df <- pre_process(covid_fit_df, covid_norm_df) #> Total number of differentially expressed proteins (8) is less than n_top. #> None of the proteins show high pair-wise correlation. #>  #> No highly correlated proteins to be removed.  ## Split the data frame into training and test data sets using default settings covid_split_df1 <- split_data(covid_model_df, seed = 8314)  ## Split the data frame into training and test data sets with 70% of the ## data in training and 30% in test data sets covid_split_df2 <- split_data(covid_model_df, train_size = 0.7, seed = 8314)  ## Access training data set covid_split_df1$training #>    sp|O00391|QSOX1_HUMAN sp|P00746|CFAD_HUMAN sp|P02652|APOA2_HUMAN #> 1               22.40059             24.73720              28.66292 #> 2               19.97970             26.80882              30.67527 #> 3               21.12426             22.82051              30.16657 #> 4               20.21675             27.64256              30.67527 #> 5               20.92041             25.60917              31.48626 #> 6               23.37177             22.71174              27.64256 #> 7               22.27765             26.38049              29.94831 #> 8               21.56619             24.97819              30.51976 #> 9               24.73720             23.57248              30.00715 #> 10              22.10170             23.73261              28.73758 #> 11              22.30244             23.87346              29.41927 #> 12              23.73261             26.60611              28.51444 #> 13              22.62693             21.62540              29.33404 #> 14              21.78974             24.47092              29.49655 #> 15              23.15140             24.32863              27.82097 #> 16              19.37365             24.06332              29.41927 #> 17              21.81120             22.19998              27.76262 #> 18              20.49465             25.23133              30.58588 #> 19              20.80441             24.32863              28.14984 #> 20              19.02912             24.32863              30.58588 #> 21              22.11671             24.42514              28.42881 #> 22              22.11671             25.32291              30.00715 #> 23              22.19998             24.79335              31.38459 #> 24              20.99572             25.73887              31.68780 #> 25              22.34632             25.78791              30.44035 #> 26              21.07625             26.97260              29.41927 #> 27              22.11671             23.62285              29.33404 #> 28              22.36332             25.50697              30.16657 #> 29              20.17148             25.45922              31.38459 #>    sp|P02765|FETUA_HUMAN sp|P13796|PLSL_HUMAN sp|P22352|GPX3_HUMAN #> 1               30.67527             22.57517             23.96220 #> 2               32.70218             17.63880             22.86492 #> 3               29.19797             25.13590             23.92030 #> 4               31.68780             18.80999             21.43144 #> 5               31.96064             19.37365             23.31727 #> 6               28.84603             26.09616             25.73887 #> 7               31.08519             21.74014             23.26651 #> 8               30.73758             19.02912             23.82412 #> 9               30.07485             23.31727             25.55824 #> 10              28.84603             21.90714             24.32863 #> 11              30.73758             19.22486             24.37980 #> 12              30.58588             22.86492             22.95628 #> 13              30.35700             23.77481             25.45922 #> 14              31.68780             19.97970             23.52849 #> 15              29.65531             25.83668             24.47092 #> 16              31.48626             20.59215             21.90714 #> 17              29.03320             24.61318             24.94399 #> 18              31.96064             20.54634             23.38986 #> 19              30.44035             24.16344             22.71174 #> 20              31.08519             20.17148             19.37365 #> 21              30.35700             20.80441             24.32863 #> 22              31.59221             21.12426             23.92030 #> 23              32.17057             21.66673             22.38032 #> 24              31.96064             20.99572             23.31727 #> 25              30.26855             15.86089             23.35368 #> 26              30.87044             22.30244             20.54634 #> 27              30.87044             22.57517             24.20810 #> 28              30.87044             20.08515             22.08669 #> 29              31.28625             20.87460             23.62285 #>    sp|P25311|ZA2G_HUMAN sp|Q16610|ECM1_HUMAN  condition #> 1              27.70882             25.18199     Severe #> 2              25.23133             27.22918 Non.Severe #> 3              27.87499             24.97819     Severe #> 4              24.84503             28.42881 Non.Severe #> 5              26.49553             27.08827     Severe #> 6              28.51444             23.87346     Severe #> 7              25.93514             26.60611 Non.Severe #> 8              26.04292             26.19652 Non.Severe #> 9              27.03502             26.74563     Severe #> 10             25.69315             24.24620     Severe #> 11             26.54609             26.04292     Severe #> 12             27.43537             26.04292     Severe #> 13             26.49553             25.02850     Severe #> 14             24.79335             27.39454     Severe #> 15             28.51444             24.84503     Severe #> 16             24.94399             26.29915 Non.Severe #> 17             27.22918             24.79335     Severe #> 18             25.98335             26.97260 Non.Severe #> 19             27.03502             26.60611     Severe #> 20             25.32291             25.78791 Non.Severe #> 21             26.34214             26.13770     Severe #> 22             26.92763             26.74563     Severe #> 23             24.56294             27.76262 Non.Severe #> 24             25.50697             27.33912 Non.Severe #> 25             26.43611             27.12807 Non.Severe #> 26             27.18300             27.54357 Non.Severe #> 27             25.88645             25.23133 Non.Severe #> 28             26.04292             27.48114 Non.Severe #> 29             26.19652             26.65823 Non.Severe  ## Access test data set covid_split_df1$test #>   sp|O00391|QSOX1_HUMAN sp|P00746|CFAD_HUMAN sp|P02652|APOA2_HUMAN #> 1              21.28517             25.93514              31.68780 #> 2              21.46057             25.45922              29.41927 #> 3              21.81120             25.36447              29.94831 #> 4              22.88773             23.67558              28.84603 #> 5              20.72842             26.09616              30.73758 #> 6              22.01501             24.84503              29.25736 #>   sp|P02765|FETUA_HUMAN sp|P13796|PLSL_HUMAN sp|P22352|GPX3_HUMAN #> 1              31.79321             18.19499             24.32863 #> 2              30.16657             21.07625             22.95628 #> 3              30.96996             19.37365             22.98936 #> 4              29.33404             23.20021             25.93514 #> 5              32.09807             21.35759             21.19299 #> 6              29.71094             19.86997             24.61318 #>   sp|P25311|ZA2G_HUMAN sp|Q16610|ECM1_HUMAN  condition #> 1             25.78791             26.65823 Non.Severe #> 2             28.73758             26.65823     Severe #> 3             27.08827             26.87214     Severe #> 4             27.92312             25.45922     Severe #> 5             24.51383             27.70882 Non.Severe #> 6             26.29915             26.24771 Non.Severe"},{"path":"https://caranathunge.github.io/promor/reference/test_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Test machine learning models on test data — test_models","title":"Test machine learning models on test data — test_models","text":"function can used predict test data using models generated different machine learning algorithms","code":""},{"path":"https://caranathunge.github.io/promor/reference/test_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test machine learning models on test data — test_models","text":"","code":"test_models(   model_list,   split_df,   type = \"prob\",   save_confusionmatrix = FALSE,   file_path = NULL,   ... )"},{"path":"https://caranathunge.github.io/promor/reference/test_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test machine learning models on test data — test_models","text":"model_list model_list object performing train_models. split_df split_df object performing split_data. type Type output. Set type \"prob\" (default) output class probabilities, \"raw\" output class predictions. save_confusionmatrix Logical. TRUE, tab-delimited text file (\"Confusion_matrices.txt\") confusion matrices long-form data format saved directory specified file_path. See details. file_path string containing directory path save file. ... Additional arguments passed predict.","code":""},{"path":"https://caranathunge.github.io/promor/reference/test_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test machine learning models on test data — test_models","text":"prediction_list: type = \"raw\", list factors containing class predictions method returned.","code":""},{"path":"https://caranathunge.github.io/promor/reference/test_models.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test machine learning models on test data — test_models","text":"Setting type = \"raw\" required obtain confusion matrices. Setting type = \"prob\" (default) output list probabilities can used generate ROC curves using roc_plot.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/test_models.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Test machine learning models on test data — test_models","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/test_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test machine learning models on test data — test_models","text":"","code":"# \\donttest{ ## Create a model_df object covid_model_df <- pre_process(covid_fit_df, covid_norm_df) #> Total number of differentially expressed proteins (8) is less than n_top. #> None of the proteins show high pair-wise correlation. #>  #> No highly correlated proteins to be removed.  ## Split the data frame into training and test data sets covid_split_df <- split_data(covid_model_df)  ## Fit models using the default list of machine learning (ML) algorithms covid_model_list <- train_models(covid_split_df) #>  #> Running svmRadial... #>  #> Running rf... #>  #> Running glm... #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #>  #> Running xgbLinear... #> Done!  # Test a list of models on a test data set and output class probabilities, covid_prob_list <- test_models(model_list = covid_model_list, split_df = covid_split_df) #>  #> Testing svmRadial... #>  #> Testing rf... #>  #> Testing glm... #>  #> Testing xgbLinear... #>  #> Done! # }  if (FALSE) { # Save confusion matrices in the working directory and output class predictions covid_pred_list <- test_models(   model_list = covid_model_list,   split_df = covid_split_df,   type = \"raw\",   save_confusionmatrix = TRUE,   file_path = \".\" ) }"},{"path":"https://caranathunge.github.io/promor/reference/train_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Train machine learning models on training data — train_models","title":"Train machine learning models on training data — train_models","text":"function can used train models protein intensity data using different machine learning algorithms","code":""},{"path":"https://caranathunge.github.io/promor/reference/train_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train machine learning models on training data — train_models","text":"","code":"train_models(   split_df,   resample_method = \"repeatedcv\",   resample_iterations = 10,   num_repeats = 3,   algorithm_list,   seed = NULL,   ... )"},{"path":"https://caranathunge.github.io/promor/reference/train_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train machine learning models on training data — train_models","text":"split_df split_df object performing split_data. resample_method resampling method use. Default \"repeatedcv\" repeated cross validation. See trainControl details available methods. resample_iterations Number resampling iterations. Default 10. num_repeats number complete sets folds compute (resampling method = \"repeatedcv\" ). algorithm_list list classification regression algorithms use. full list machine learning algorithms available caret package can found : http://topepo.github.io/caret/train-models--tag.html. See default options. seed Numerical. Random number seed. Default NULL ... Additional arguments passed train function caret package.","code":""},{"path":"https://caranathunge.github.io/promor/reference/train_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train machine learning models on training data — train_models","text":"list class train machine-learning algorithm. See train information accessing different elements list.","code":""},{"path":"https://caranathunge.github.io/promor/reference/train_models.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Train machine learning models on training data — train_models","text":"event algorithm_list provided, default list four classification-based machine-learning algorithms used building training models. Default algorithm_list: \"svmRadial\", \"rf\", \"glm\", \"xgbLinear.\" Note: Models fail build removed output. Make sure fix random number seed seed reproducibility","code":""},{"path":"https://caranathunge.github.io/promor/reference/train_models.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Train machine learning models on training data — train_models","text":"Kuhn, Max. \"Building predictive models R using caret package.\" Journal statistical software 28 (2008): 1-26.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/train_models.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train machine learning models on training data — train_models","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/train_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train machine learning models on training data — train_models","text":"","code":"# \\donttest{  ## Create a model_df object covid_model_df <- pre_process(covid_fit_df, covid_norm_df) #> Total number of differentially expressed proteins (8) is less than n_top. #> None of the proteins show high pair-wise correlation. #>  #> No highly correlated proteins to be removed.  ## Split the data frame into training and test data sets covid_split_df <- split_data(covid_model_df, seed = 8314)  ## Fit models based on the default list of machine learning (ML) algorithms covid_model_list1 <- train_models(split_df = covid_split_df, seed = 351) #>  #> Running svmRadial... #>  #> Running rf... #>  #> Running glm... #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #>  #> Running xgbLinear... #> Done!  ## Fit models using a user-specified list of ML algorithms. covid_model_list2 <- train_models(   covid_split_df,   algorithm_list = c(\"svmRadial\", \"glmboost\"),   seed = 351 ) #>  #> Running svmRadial... #>  #> Running glmboost... #> glmboost failed. #> Done!  ## Change resampling method and resampling iterations. covid_model_list3 <- train_models(   covid_split_df,   resample_method = \"cv\",   resample_iterations = 50,   seed = 351 ) #> Warning: `repeats` has no meaning for this resampling method. #>  #> Running svmRadial... #> Warning: There were missing values in resampled performance measures. #>  #> Running rf... #> Warning: There were missing values in resampled performance measures. #>  #> Running glm... #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: There were missing values in resampled performance measures. #>  #> Running xgbLinear... #> Warning: There were missing values in resampled performance measures. #> Done! # }"},{"path":"https://caranathunge.github.io/promor/reference/varimp_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable importance plot — varimp_plot","title":"Variable importance plot — varimp_plot","text":"function visualizes variable importance models","code":""},{"path":"https://caranathunge.github.io/promor/reference/varimp_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable importance plot — varimp_plot","text":"","code":"varimp_plot(   model_list,   ...,   type = \"lollipop\",   text_size = 10,   palette = \"viridis\",   n_row,   n_col,   save = FALSE,   file_path = NULL,   file_name = \"VarImp_plot\",   file_type = \"pdf\",   dpi = 80,   plot_width = 7,   plot_height = 7 )"},{"path":"https://caranathunge.github.io/promor/reference/varimp_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable importance plot — varimp_plot","text":"model_list model_list object performing train_models. ... Additional arguments passed varImp. type Type plot generate. Choices \"bar\" \"lollipop.\" Default \"lollipop.\" text_size Text size plot labels, axis labels etc. Default 10. palette Viridis color palette option plots. Default \"viridis\". See viridis available options. n_row Number rows print plots. n_col Number columns print plots. save Logical. TRUE saves copy plot directory provided file_path. file_path string containing directory path save file. file_name File name save plot. Default \"VarImp_plot.\" file_type File type save plot. Default \"pdf\". dpi Plot resolution. Default 80. plot_width Width plot. Default 7. plot_height Height plot. Default 7.","code":""},{"path":"https://caranathunge.github.io/promor/reference/varimp_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable importance plot — varimp_plot","text":"list ggplot2 objects.","code":""},{"path":"https://caranathunge.github.io/promor/reference/varimp_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variable importance plot — varimp_plot","text":"Note: Variables ordered variable importance descending order, default, importance values scaled 0 100. can changed specifying scale = FALSE. See varImp information.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/varimp_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Variable importance plot — varimp_plot","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/varimp_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable importance plot — varimp_plot","text":"","code":"# \\donttest{  ## Create a model_df object covid_model_df <- pre_process(covid_fit_df, covid_norm_df) #> Total number of differentially expressed proteins (8) is less than n_top. #> None of the proteins show high pair-wise correlation. #>  #> No highly correlated proteins to be removed.  ## Split the data frame into training and test data sets covid_split_df <- split_data(covid_model_df)  ## Fit models based on the default list of machine learning (ML) algorithms covid_model_list <- train_models(covid_split_df) #>  #> Running svmRadial... #>  #> Running rf... #>  #> Running glm... #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #>  #> Running xgbLinear... #> Done!  ## Variable importance - lollipop plots varimp_plot(covid_model_list)   ## Bar plots varimp_plot(covid_model_list, type = \"bar\")   ## Do not scale variable importance values varimp_plot(covid_model_list, scale = FALSE)   ## Change color palette varimp_plot(covid_model_list, palette = \"magma\")  # }"},{"path":"https://caranathunge.github.io/promor/reference/volcano_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Volcano plot — volcano_plot","title":"Volcano plot — volcano_plot","text":"function generates volcano plots visualize differentially expressed proteins groups.","code":""},{"path":"https://caranathunge.github.io/promor/reference/volcano_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Volcano plot — volcano_plot","text":"","code":"volcano_plot(   fit_df,   adj_method = \"BH\",   sig = \"adjP\",   cutoff = 0.05,   lfc = 1,   line_fc = TRUE,   line_p = TRUE,   palette = \"viridis\",   text_size = 10,   label_top = FALSE,   n_top = 10,   save = FALSE,   file_path = NULL,   file_name = \"Volcano_plot\",   file_type = \"pdf\",   plot_height = 7,   plot_width = 7,   dpi = 80 )"},{"path":"https://caranathunge.github.io/promor/reference/volcano_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Volcano plot — volcano_plot","text":"fit_df fit_df object performing find_dep. adj_method Method used adjusting p-values multiple testing. Default \"BH\". sig Criteria denote significance. Choices \"adjP\" (default) adjusted p-value \"P\" p-value. cutoff Cutoff value p-values adjusted p-values. Default 0.05. lfc Minimum absolute log2-fold change use threshold differential expression. line_fc Logical. TRUE(default), dotted line shown indicate lfc threshold plot. line_p Logical. TRUE(default), dotted line shown indicate p-value cutoff. palette Viridis color palette option plots. Default \"viridis\". See viridis available options. text_size Text size axis text, labels etc. label_top Logical. TRUE (default), labels added dots indicate protein names. n_top number top hits label protein name label_top = TRUE. Default 10. save Logical. TRUE saves copy plot directory provided file_path. file_path string containing directory path save file. file_name File name save plot. Default \"Volcano_plot.\" file_type File type save plot. Default \"pdf\". plot_height Height plot. Default 7. plot_width Width plot. Default 7. dpi Plot resolution. Default 80.","code":""},{"path":"https://caranathunge.github.io/promor/reference/volcano_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Volcano plot — volcano_plot","text":"ggplot2 plot object.","code":""},{"path":"https://caranathunge.github.io/promor/reference/volcano_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Volcano plot — volcano_plot","text":"volcano_plot requires fit_df object performing differential expression analysis find_dep. User option choose criteria denote significance.","code":""},{"path":[]},{"path":"https://caranathunge.github.io/promor/reference/volcano_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Volcano plot — volcano_plot","text":"Chathurani Ranathunge","code":""},{"path":"https://caranathunge.github.io/promor/reference/volcano_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Volcano plot — volcano_plot","text":"","code":"## Create a volcano plot with default settings. volcano_plot(ecoli_fit_df)   ## Change significance criteria and cutoff volcano_plot(ecoli_fit_df, cutoff = 0.1, sig = \"P\")   ## Label top 30 differentially expressed proteins and ## change the color palette of the plot volcano_plot(ecoli_fit_df, label_top = TRUE, n_top = 30, palette = \"mako\") #> Warning: ggrepel: 12 unlabeled data points (too many overlaps). Consider increasing max.overlaps"},{"path":"https://caranathunge.github.io/promor/news/index.html","id":"promor-011","dir":"Changelog","previous_headings":"","what":"promor 0.1.1","title":"promor 0.1.1","text":"CRAN release: 2022-11-01","code":""},{"path":"https://caranathunge.github.io/promor/news/index.html","id":"bug-fixes-0-1-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"promor 0.1.1","text":"Fixes minor issue create_df removing potential contaminants. number potential contaminants removed now shown console. Fixes issue find_dep previously used fixed value adj_method argument. Fixes issue file_path argument saving “TopHits.txt” file produced find_dep function.","code":""},{"path":"https://caranathunge.github.io/promor/news/index.html","id":"other-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Other changes","title":"promor 0.1.1","text":"Citation file updated biorxiv preprint details. Readme file updated information Shiny App. Help pages updated.","code":""},{"path":"https://caranathunge.github.io/promor/news/index.html","id":"promor-010","dir":"Changelog","previous_headings":"","what":"promor 0.1.0","title":"promor 0.1.0","text":"CRAN release: 2022-07-20 First official release!","code":""}]
